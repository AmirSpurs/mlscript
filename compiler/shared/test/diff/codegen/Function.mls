:NewParser
:NewDefs

fun incr(x:Int):Int = x+1
log of incr(2)
//│ fun incr: (x: Int,) -> Int
//│ undefined
//│ incr IR:
//│ Basic Block incr (x):
//│   a = Add x, 1
//│   return a
//│ 
//│ entry IR:
//│ Basic Block entry ():
//│   b1 = call incr (2)
//│   c1 = call log (b1)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log (import "system" "log") (param i32 i32))
//│   (global (mut i32) i32.const 0) 
//│ 
//│   (func $incr (param $x i32) (result i32) (local $a i32)
//│     local.get $x
//│     i32.const 1
//│     i32.add
//│     local.set $a
//│     local.get $a
//│   )
//│   (export "main" (func $main))
//│   (func $main (local $c1 i32)(local $b1 i32)
//│     i32.const 2
//│     call $incr
//│     local.set $b1
//│     local.get $b1
//│     i32.const 2
//│     call $log
//│     i32.const 0
//│     local.set $c1
//│   )
//│   (start $main)
//│ )
//│ 
//│ res
//│     = [Function: incr]

fun fib(x:Int):Int = if x is
    0 then 0
    1 then 1
    else fib(-1+x) + fib(-2+x)
log of fib(10)
//│ fun fib: (x: Int,) -> Int
//│ undefined
//│ fib IR:
//│ Basic Block fib (x):
//│   match x
//│     0 -> j ()
//│     1 -> l ()
//│     _ -> c ()
//│ Basic Block j ():
//│   k = 0
//│   br b (k)
//│ Basic Block l ():
//│   m = 1
//│   br b (m)
//│ Basic Block c ():
//│   e = Add -1, x
//│   f1 = call fib (e)
//│   g = Add -2, x
//│   h1 = call fib (g)
//│   i = Add f1, h1
//│   d = i
//│   br b (d)
//│ Basic Block b (a):
//│   return a
//│ 
//│ entry IR:
//│ Basic Block entry ():
//│   n1 = call fib (10)
//│   o1 = call log (n1)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log (import "system" "log") (param i32 i32))
//│   (global (mut i32) i32.const 0) 
//│ 
//│   (func $fib (param $x i32) (result i32) (local $e i32)(local $f1 i32)(local $a i32)(local $m i32)(local $i i32)(local $g i32)(local $h1 i32)(local $k i32)(local $d i32)
//│     block $fib
//│       block $c
//│         block $j
//│           block $l
//│             block $Match_x
//│               local.get $x
//│               i32.const 0
//│               i32.eq
//│               i32.const 1
//│               i32.mul
//│               local.get $x
//│               i32.const 1
//│               i32.eq
//│               i32.const 2
//│               i32.mul
//│               i32.add
//│               br_table 2 1 0
//│             end
//│             i32.const 1
//│             local.set $m
//│             local.get $m
//│             local.set $a
//│             br $c
//│           end
//│           i32.const 0
//│           local.set $k
//│           local.get $k
//│           local.set $a
//│           br $c
//│         end
//│         i32.const -1
//│         local.get $x
//│         i32.add
//│         local.set $e
//│         local.get $e
//│         call $fib
//│         local.set $f1
//│         i32.const -2
//│         local.get $x
//│         i32.add
//│         local.set $g
//│         local.get $g
//│         call $fib
//│         local.set $h1
//│         local.get $f1
//│         local.get $h1
//│         i32.add
//│         local.set $i
//│         local.get $i
//│         local.set $d
//│         local.get $d
//│         local.set $a
//│       end
//│     end
//│     local.get $a
//│   )
//│   (export "main" (func $main))
//│   (func $main (local $o1 i32)(local $n1 i32)
//│     i32.const 10
//│     call $fib
//│     local.set $n1
//│     local.get $n1
//│     i32.const 2
//│     call $log
//│     i32.const 0
//│     local.set $o1
//│   )
//│   (start $main)
//│ )
//│ 
//│ res
//│     = [Function: fib]

fun get1():Int = 1
log of get1()
//│ fun get1: () -> Int
//│ undefined
//│ get1 IR:
//│ Basic Block get1 ():
//│   return 1
//│ 
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call get1 ()
//│   b1 = call log (a1)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log (import "system" "log") (param i32 i32))
//│   (global (mut i32) i32.const 0) 
//│ 
//│   (func $get1 (result i32) 
//│     i32.const 1
//│   )
//│   (export "main" (func $main))
//│   (func $main (local $a1 i32)(local $b1 i32)
//│     call $get1
//│     local.set $a1
//│     local.get $a1
//│     i32.const 2
//│     call $log
//│     i32.const 0
//│     local.set $b1
//│   )
//│   (start $main)
//│ )
//│ 
//│ res
//│     = [Function: get1]

class List()
class Nil() extends List
class Cons(head:Int, tail:List) extends List
let list = Cons(1,Cons(3,Cons(5,Cons(7,Nil()))))
fun sum(x:List):Int = if x is
    Cons(h,t) then h+sum(t)
    else 0
log of sum(list)
//│ class List()
//│ class Nil() extends List
//│ class Cons(head: Int, tail: List) extends List
//│ let list: Cons
//│ fun sum: (x: List,) -> Int
//│ undefined
//│ sum IR:
//│ Basic Block sum (x):
//│   match x
//│     Cons -> j ()
//│     _ -> h ()
//│ Basic Block j ():
//│   k = getfield x, head
//│   h1 = k
//│   l = getfield x, tail
//│   t = l
//│   n1 = call sum (t)
//│   o = Add h1, n1
//│   m = o
//│   br g (m)
//│ Basic Block h ():
//│   i = 0
//│   br g (i)
//│ Basic Block g (f):
//│   return f
//│ 
//│ entry IR:
//│ Basic Block entry ():
//│   a = alloc Nil
//│   b = alloc Cons
//│   setfield b.tail = 7
//│   setfield b.head = a
//│   c = alloc Cons
//│   setfield c.tail = 5
//│   setfield c.head = b
//│   d = alloc Cons
//│   setfield d.tail = 3
//│   setfield d.head = c
//│   e = alloc Cons
//│   setfield e.tail = 1
//│   setfield e.head = d
//│   list1 = e
//│   p1 = call sum (list1)
//│   q1 = call log (p1)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log (import "system" "log") (param i32 i32))
//│   (global (mut i32) i32.const 0) 
//│ 
//│   (func $sum (param $x i32) (result i32) (local $t i32)(local $m i32)(local $i i32)(local $l i32)(local $h1 i32)(local $k i32)(local $o i32)(local $n1 i32)(local $f i32)
//│     block $sum
//│       local.get $x
//│       i32.load
//│       i32.const 1
//│       i32.eq
//│       if
//│         local.get $x
//│         i32.const 8
//│         i32.add
//│         i32.load
//│         local.set $k
//│         local.get $k
//│         local.set $h1
//│         local.get $x
//│         i32.const 4
//│         i32.add
//│         i32.load
//│         local.set $l
//│         local.get $l
//│         local.set $t
//│         local.get $t
//│         call $sum
//│         local.set $n1
//│         local.get $h1
//│         local.get $n1
//│         i32.add
//│         local.set $o
//│         local.get $o
//│         local.set $m
//│         local.get $m
//│         local.set $f
//│       else
//│         i32.const 0
//│         local.set $i
//│         local.get $i
//│         local.set $f
//│       end
//│     end
//│     local.get $f
//│   )
//│   (export "main" (func $main))
//│   (func $main (local $e i32)(local $a i32)(local $list1 i32)(local $b i32)(local $c i32)(local $q1 i32)(local $p1 i32)(local $d i32)
//│     global.get 0
//│     local.set $a
//│     global.get 0
//│     i32.const 0
//│     i32.store
//│     global.get 0
//│     i32.const 4
//│     i32.add
//│     global.set 0
//│     global.get 0
//│     local.set $b
//│     global.get 0
//│     i32.const 1
//│     i32.store
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     global.set 0
//│     local.get $b
//│     i32.const 4
//│     i32.add
//│     i32.const 7
//│     i32.store
//│     local.get $b
//│     i32.const 8
//│     i32.add
//│     local.get $a
//│     i32.store
//│     global.get 0
//│     local.set $c
//│     global.get 0
//│     i32.const 1
//│     i32.store
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     global.set 0
//│     local.get $c
//│     i32.const 4
//│     i32.add
//│     i32.const 5
//│     i32.store
//│     local.get $c
//│     i32.const 8
//│     i32.add
//│     local.get $b
//│     i32.store
//│     global.get 0
//│     local.set $d
//│     global.get 0
//│     i32.const 1
//│     i32.store
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     global.set 0
//│     local.get $d
//│     i32.const 4
//│     i32.add
//│     i32.const 3
//│     i32.store
//│     local.get $d
//│     i32.const 8
//│     i32.add
//│     local.get $c
//│     i32.store
//│     global.get 0
//│     local.set $e
//│     global.get 0
//│     i32.const 1
//│     i32.store
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     global.set 0
//│     local.get $e
//│     i32.const 4
//│     i32.add
//│     i32.const 1
//│     i32.store
//│     local.get $e
//│     i32.const 8
//│     i32.add
//│     local.get $d
//│     i32.store
//│     local.get $e
//│     local.set $list1
//│     local.get $list1
//│     call $sum
//│     local.set $p1
//│     local.get $p1
//│     i32.const 2
//│     call $log
//│     i32.const 0
//│     local.set $q1
//│   )
//│   (start $main)
//│ )
//│ 
//│ list
//│      = Cons {}
//│ res
//│     = [Function: sum]

fun getString():Str = "MLscript"
fun getTrue():Bool = true
fun getFalse():Bool = false
fun getZero():Int = 0
class Foo(x:Int)
fun getClass():Foo = Foo(10)
log(getString())
log(getTrue())
log(getFalse())
log(getZero())
log(getClass().x)
//│ fun getString: () -> Str
//│ fun getTrue: () -> Bool
//│ fun getFalse: () -> Bool
//│ fun getZero: () -> Int
//│ class Foo(x: Int)
//│ fun getClass: () -> Foo
//│ undefined
//│ getString IR:
//│ Basic Block getString ():
//│   return MLscript
//│ 
//│ getTrue IR:
//│ Basic Block getTrue ():
//│   return true
//│ 
//│ getFalse IR:
//│ Basic Block getFalse ():
//│   return false
//│ 
//│ getZero IR:
//│ Basic Block getZero ():
//│   return 0
//│ 
//│ getClass IR:
//│ Basic Block getClass ():
//│   a = alloc Foo
//│   setfield a.x = 10
//│   return a
//│ 
//│ entry IR:
//│ Basic Block entry ():
//│   b1 = call getString ()
//│   c1 = call log (b1)
//│   d1 = call getTrue ()
//│   e1 = call log (d1)
//│   f1 = call getFalse ()
//│   g1 = call log (f1)
//│   h1 = call getZero ()
//│   i1 = call log (h1)
//│   j1 = call getClass ()
//│   k = getfield j1, x
//│   l1 = call log (k)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log (import "system" "log") (param i32 i32))
//│   (global (mut i32) i32.const 0) 
//│ 
//│   (func $getString (result i32) 
//│     global.get 0
//│     i32.const 0
//│     i32.add
//│     i32.const 77
//│     i32.store8
//│     global.get 0
//│     i32.const 1
//│     i32.add
//│     i32.const 76
//│     i32.store8
//│     global.get 0
//│     i32.const 2
//│     i32.add
//│     i32.const 115
//│     i32.store8
//│     global.get 0
//│     i32.const 3
//│     i32.add
//│     i32.const 99
//│     i32.store8
//│     global.get 0
//│     i32.const 4
//│     i32.add
//│     i32.const 114
//│     i32.store8
//│     global.get 0
//│     i32.const 5
//│     i32.add
//│     i32.const 105
//│     i32.store8
//│     global.get 0
//│     i32.const 6
//│     i32.add
//│     i32.const 112
//│     i32.store8
//│     global.get 0
//│     i32.const 7
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 8
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     i32.const 9
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     i32.const 10
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     i32.const 11
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     global.set 0
//│   )
//│ 
//│   (func $getTrue (result i32) 
//│     i32.const 1
//│   )
//│ 
//│   (func $getFalse (result i32) 
//│     i32.const 0
//│   )
//│ 
//│   (func $getZero (result i32) 
//│     i32.const 0
//│   )
//│ 
//│   (func $getClass (result i32) (local $a i32)
//│     global.get 0
//│     local.set $a
//│     global.get 0
//│     i32.const 0
//│     i32.store
//│     global.get 0
//│     i32.const 8
//│     i32.add
//│     global.set 0
//│     local.get $a
//│     i32.const 4
//│     i32.add
//│     i32.const 10
//│     i32.store
//│     local.get $a
//│   )
//│   (export "main" (func $main))
//│   (func $main (local $l1 i32)(local $j1 i32)(local $e1 i32)(local $f1 i32)(local $b1 i32)(local $g1 i32)(local $h1 i32)(local $d1 i32)(local $k i32)(local $c1 i32)(local $i1 i32)
//│     call $getString
//│     local.set $b1
//│     local.get $b1
//│     i32.const 4
//│     call $log
//│     i32.const 0
//│     local.set $c1
//│     call $getTrue
//│     local.set $d1
//│     local.get $d1
//│     i32.const 1
//│     call $log
//│     i32.const 0
//│     local.set $e1
//│     call $getFalse
//│     local.set $f1
//│     local.get $f1
//│     i32.const 1
//│     call $log
//│     i32.const 0
//│     local.set $g1
//│     call $getZero
//│     local.set $h1
//│     local.get $h1
//│     i32.const 2
//│     call $log
//│     i32.const 0
//│     local.set $i1
//│     call $getClass
//│     local.set $j1
//│     local.get $j1
//│     i32.const 4
//│     i32.add
//│     i32.load
//│     local.set $k
//│     local.get $k
//│     i32.const 2
//│     call $log
//│     i32.const 0
//│     local.set $l1
//│   )
//│   (start $main)
//│ )
//│ 
//│ res
//│     = [Function: getString]
//│ res
//│     = [Function: getTrue]
//│ res
//│     = [Function: getFalse]
//│ res
//│     = [Function: getZero]
//│ res
//│     = [Function: getClass]
