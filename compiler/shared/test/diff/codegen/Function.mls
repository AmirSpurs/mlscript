:NewParser
:NewDefs

log of "Function Test 1"
fun incr(x:Int):Int = x+1
log of incr(2)
//│ fun incr: (x: Int,) -> Int
//│ undefined
//│ incr IR:
//│ Basic Block incr (x):
//│   b = Add x, 1
//│   return b
//│ 
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Function Test 1)
//│   b1 = call incr (2)
//│   c1 = call log (b1)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│ 
//│   (func $incr (param $x i64) (result i64) (local $b i64) 
//│     local.get $x
//│     i64.const 1
//│     i64.add
//│     local.set $b
//│     local.get $b
//│   )
//│   (export "main" (func $main))
//│   (func $main (local $a1 i32) (local $c1 i32) (local $b1 i64) 
//│     global.get 0
//│     i32.const 0
//│     i32.add
//│     i32.const 70
//│     i32.store8
//│     global.get 0
//│     i32.const 1
//│     i32.add
//│     i32.const 117
//│     i32.store8
//│     global.get 0
//│     i32.const 2
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 3
//│     i32.add
//│     i32.const 99
//│     i32.store8
//│     global.get 0
//│     i32.const 4
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 5
//│     i32.add
//│     i32.const 105
//│     i32.store8
//│     global.get 0
//│     i32.const 6
//│     i32.add
//│     i32.const 111
//│     i32.store8
//│     global.get 0
//│     i32.const 7
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 8
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 9
//│     i32.add
//│     i32.const 84
//│     i32.store8
//│     global.get 0
//│     i32.const 10
//│     i32.add
//│     i32.const 101
//│     i32.store8
//│     global.get 0
//│     i32.const 11
//│     i32.add
//│     i32.const 115
//│     i32.store8
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 13
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 14
//│     i32.add
//│     i32.const 49
//│     i32.store8
//│     global.get 0
//│     i32.const 15
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     global.get 0
//│     i32.const 16
//│     i32.add
//│     global.set 0
//│     i32.const 4
//│     call $logI32
//│     i32.const 0
//│     local.set $a1
//│     i64.const 2
//│     call $incr
//│     local.set $b1
//│     local.get $b1
//│     call $logI64
//│     i32.const 0
//│     local.set $c1
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Function Test 1
//│ res
//│     = [Function: incr]

log of "Function Test 2"
fun fib(x:Int):Int = if x is
  0 then 0
  1 then 1
  else fib(-1+x) + fib(-2+x)
log of fib(10)
//│ fun fib: (x: Int,) -> Int
//│ undefined
//│ fib IR:
//│ Basic Block fib (x):
//│   match x
//│     0 -> k ()
//│     1 -> m ()
//│     _ -> d ()
//│ Basic Block k ():
//│   l = 0
//│   br c (l)
//│ Basic Block m ():
//│   n = 1
//│   br c (n)
//│ Basic Block d ():
//│   f = Add -1, x
//│   g1 = call fib (f)
//│   h = Add -2, x
//│   i1 = call fib (h)
//│   j = Add g1, i1
//│   e = j
//│   br c (e)
//│ Basic Block c (b):
//│   return b
//│ 
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Function Test 2)
//│   b1 = call fib (10)
//│   c1 = call log (b1)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│ 
//│   (func $fib (param $x i64) (result i64) (local $e i64) (local $n i64) (local $j i64) (local $f i64) (local $g1 i64) (local $i1 i64) (local $b i64) (local $l i64) (local $h i64) 
//│     block $fib
//│       block $d
//│         block $k
//│           block $m
//│             block $Match_x
//│               local.get $x
//│               i64.const 0
//│               i64.eq
//│               i32.const 1
//│               i32.mul
//│               local.get $x
//│               i64.const 1
//│               i64.eq
//│               i32.const 2
//│               i32.mul
//│               i32.add
//│               br_table 2 1 0
//│             end
//│             i64.const 1
//│             local.set $n
//│             local.get $n
//│             local.set $b
//│             br $d
//│           end
//│           i64.const 0
//│           local.set $l
//│           local.get $l
//│           local.set $b
//│           br $d
//│         end
//│         i64.const -1
//│         local.get $x
//│         i64.add
//│         local.set $f
//│         local.get $f
//│         call $fib
//│         local.set $g1
//│         i64.const -2
//│         local.get $x
//│         i64.add
//│         local.set $h
//│         local.get $h
//│         call $fib
//│         local.set $i1
//│         local.get $g1
//│         local.get $i1
//│         i64.add
//│         local.set $j
//│         local.get $j
//│         local.set $e
//│         local.get $e
//│         local.set $b
//│       end
//│     end
//│     local.get $b
//│   )
//│   (export "main" (func $main))
//│   (func $main (local $a1 i32) (local $c1 i32) (local $b1 i64) 
//│     global.get 0
//│     i32.const 0
//│     i32.add
//│     i32.const 70
//│     i32.store8
//│     global.get 0
//│     i32.const 1
//│     i32.add
//│     i32.const 117
//│     i32.store8
//│     global.get 0
//│     i32.const 2
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 3
//│     i32.add
//│     i32.const 99
//│     i32.store8
//│     global.get 0
//│     i32.const 4
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 5
//│     i32.add
//│     i32.const 105
//│     i32.store8
//│     global.get 0
//│     i32.const 6
//│     i32.add
//│     i32.const 111
//│     i32.store8
//│     global.get 0
//│     i32.const 7
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 8
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 9
//│     i32.add
//│     i32.const 84
//│     i32.store8
//│     global.get 0
//│     i32.const 10
//│     i32.add
//│     i32.const 101
//│     i32.store8
//│     global.get 0
//│     i32.const 11
//│     i32.add
//│     i32.const 115
//│     i32.store8
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 13
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 14
//│     i32.add
//│     i32.const 50
//│     i32.store8
//│     global.get 0
//│     i32.const 15
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     global.get 0
//│     i32.const 16
//│     i32.add
//│     global.set 0
//│     i32.const 4
//│     call $logI32
//│     i32.const 0
//│     local.set $a1
//│     i64.const 10
//│     call $fib
//│     local.set $b1
//│     local.get $b1
//│     call $logI64
//│     i32.const 0
//│     local.set $c1
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Function Test 2
//│ res
//│     = [Function: fib]

log of "Function Test 3"
fun get1():Int = 1
log of get1()
//│ fun get1: () -> Int
//│ undefined
//│ get1 IR:
//│ Basic Block get1 ():
//│   return 1
//│ 
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Function Test 3)
//│   b1 = call get1 ()
//│   c1 = call log (b1)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│ 
//│   (func $get1 (result i64) 
//│     i64.const 1
//│   )
//│   (export "main" (func $main))
//│   (func $main (local $a1 i32) (local $c1 i32) (local $b1 i64) 
//│     global.get 0
//│     i32.const 0
//│     i32.add
//│     i32.const 70
//│     i32.store8
//│     global.get 0
//│     i32.const 1
//│     i32.add
//│     i32.const 117
//│     i32.store8
//│     global.get 0
//│     i32.const 2
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 3
//│     i32.add
//│     i32.const 99
//│     i32.store8
//│     global.get 0
//│     i32.const 4
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 5
//│     i32.add
//│     i32.const 105
//│     i32.store8
//│     global.get 0
//│     i32.const 6
//│     i32.add
//│     i32.const 111
//│     i32.store8
//│     global.get 0
//│     i32.const 7
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 8
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 9
//│     i32.add
//│     i32.const 84
//│     i32.store8
//│     global.get 0
//│     i32.const 10
//│     i32.add
//│     i32.const 101
//│     i32.store8
//│     global.get 0
//│     i32.const 11
//│     i32.add
//│     i32.const 115
//│     i32.store8
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 13
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 14
//│     i32.add
//│     i32.const 51
//│     i32.store8
//│     global.get 0
//│     i32.const 15
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     global.get 0
//│     i32.const 16
//│     i32.add
//│     global.set 0
//│     i32.const 4
//│     call $logI32
//│     i32.const 0
//│     local.set $a1
//│     call $get1
//│     local.set $b1
//│     local.get $b1
//│     call $logI64
//│     i32.const 0
//│     local.set $c1
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Function Test 3
//│ res
//│     = [Function: get1]

//FIXME handle class inheritance
log of "Function Test 4"
class List()
class Nil() extends List
class Cons(head:Int, tail:List) extends List
let list = Cons(1,Cons(3,Cons(5,Cons(7,Nil()))))
fun sum(x:List):Int = if x is
  Cons(h,t) then h+sum(t)
  else 0
log of sum(list)
// fun atIndex(ls:List,idx:Int):Int = if ls is
  // Cons(h,t) then if (idx==0) then h else atIndex(t,idx-1)
  // else 0
// log of atIndex(list,1)
//│ class List()
//│ class Nil() extends List
//│ class Cons(head: Int, tail: List) extends List
//│ let list: Cons
//│ fun sum: (x: List,) -> Int
//│ ()
//│ sum IR:
//│ Basic Block sum (x):
//│   match x
//│     Cons -> l ()
//│     _ -> j ()
//│ Basic Block l ():
//│   m = cast x, Cons
//│   n = getfield m, head
//│   h1 = n
//│   o = getfield m, tail
//│   t = o
//│   q1 = call sum (t)
//│   r = Add h1, q1
//│   p = r
//│   br i (p)
//│ Basic Block j ():
//│   k = 0
//│   br i (k)
//│ Basic Block i (h):
//│   return h
//│ 
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Function Test 4)
//│   b = alloc Nil
//│   c = alloc Cons
//│   setfield c.head = 7
//│   setfield c.tail = b
//│   d = alloc Cons
//│   setfield d.head = 5
//│   setfield d.tail = c
//│   e = alloc Cons
//│   setfield e.head = 3
//│   setfield e.tail = d
//│   f = alloc Cons
//│   setfield f.head = 1
//│   setfield f.tail = e
//│   g = f
//│   h1 = call sum (g)
//│   i1 = call log (h1)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│ 
//│   (func $sum (param $x i32) (result i64) (local $n i64) (local $t i32) (local $m i32) (local $p i64) (local $h1 i64) (local $h i64) (local $r i64) (local $q1 i64) (local $k i64) (local $o i32) 
//│     block $sum
//│       local.get $x
//│       i32.load
//│       i32.const 1
//│       i32.eq
//│       if
//│         local.get $x
//│         local.set $m
//│         local.get $m
//│         i32.const 4
//│         i32.add
//│         i64.load
//│         local.set $n
//│         local.get $n
//│         local.set $h1
//│         local.get $m
//│         i32.const 12
//│         i32.add
//│         i32.load
//│         local.set $o
//│         local.get $o
//│         local.set $t
//│         local.get $t
//│         call $sum
//│         local.set $q1
//│         local.get $h1
//│         local.get $q1
//│         i64.add
//│         local.set $r
//│         local.get $r
//│         local.set $p
//│         local.get $p
//│         local.set $h
//│       else
//│         i64.const 0
//│         local.set $k
//│         local.get $k
//│         local.set $h
//│       end
//│     end
//│     local.get $h
//│   )
//│   (export "main" (func $main))
//│   (func $main (local $e i32) (local $f i32) (local $i1 i32) (local $b i32) (local $g i32) (local $h1 i64) (local $d i32) (local $c i32) (local $a1 i32) 
//│     global.get 0
//│     i32.const 0
//│     i32.add
//│     i32.const 70
//│     i32.store8
//│     global.get 0
//│     i32.const 1
//│     i32.add
//│     i32.const 117
//│     i32.store8
//│     global.get 0
//│     i32.const 2
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 3
//│     i32.add
//│     i32.const 99
//│     i32.store8
//│     global.get 0
//│     i32.const 4
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 5
//│     i32.add
//│     i32.const 105
//│     i32.store8
//│     global.get 0
//│     i32.const 6
//│     i32.add
//│     i32.const 111
//│     i32.store8
//│     global.get 0
//│     i32.const 7
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 8
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 9
//│     i32.add
//│     i32.const 84
//│     i32.store8
//│     global.get 0
//│     i32.const 10
//│     i32.add
//│     i32.const 101
//│     i32.store8
//│     global.get 0
//│     i32.const 11
//│     i32.add
//│     i32.const 115
//│     i32.store8
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 13
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 14
//│     i32.add
//│     i32.const 52
//│     i32.store8
//│     global.get 0
//│     i32.const 15
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     global.get 0
//│     i32.const 16
//│     i32.add
//│     global.set 0
//│     i32.const 4
//│     call $logI32
//│     i32.const 0
//│     local.set $a1
//│     global.get 0
//│     local.set $b
//│     global.get 0
//│     i32.const 0
//│     i32.store
//│     global.get 0
//│     i32.const 4
//│     i32.add
//│     global.set 0
//│     global.get 0
//│     local.set $c
//│     global.get 0
//│     i32.const 1
//│     i32.store
//│     global.get 0
//│     i32.const 16
//│     i32.add
//│     global.set 0
//│     local.get $c
//│     i32.const 4
//│     i32.add
//│     i64.const 7
//│     i64.store
//│     local.get $c
//│     i32.const 12
//│     i32.add
//│     local.get $b
//│     i32.store
//│     global.get 0
//│     local.set $d
//│     global.get 0
//│     i32.const 1
//│     i32.store
//│     global.get 0
//│     i32.const 16
//│     i32.add
//│     global.set 0
//│     local.get $d
//│     i32.const 4
//│     i32.add
//│     i64.const 5
//│     i64.store
//│     local.get $d
//│     i32.const 12
//│     i32.add
//│     local.get $c
//│     i32.store
//│     global.get 0
//│     local.set $e
//│     global.get 0
//│     i32.const 1
//│     i32.store
//│     global.get 0
//│     i32.const 16
//│     i32.add
//│     global.set 0
//│     local.get $e
//│     i32.const 4
//│     i32.add
//│     i64.const 3
//│     i64.store
//│     local.get $e
//│     i32.const 12
//│     i32.add
//│     local.get $d
//│     i32.store
//│     global.get 0
//│     local.set $f
//│     global.get 0
//│     i32.const 1
//│     i32.store
//│     global.get 0
//│     i32.const 16
//│     i32.add
//│     global.set 0
//│     local.get $f
//│     i32.const 4
//│     i32.add
//│     i64.const 1
//│     i64.store
//│     local.get $f
//│     i32.const 12
//│     i32.add
//│     local.get $e
//│     i32.store
//│     local.get $f
//│     local.set $g
//│     local.get $g
//│     call $sum
//│     local.set $h1
//│     local.get $h1
//│     call $logI64
//│     i32.const 0
//│     local.set $i1
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Function Test 4
//│ list
//│      = Cons {}
//│ res
//│     = [Function: sum]
//│ res
//│     = undefined
//│ // Output
//│ 16

log of "Function Test 5"
fun getString():Str = "MLscript"
fun getTrue():Bool = true
fun getFalse():Bool = false
fun getZero():Int = 0
class Foo(x:Int)
fun getClass():Foo = Foo(10)
log(getString())
log(getTrue())
log(getFalse())
log(getZero())
log(getClass().x)
//│ fun getString: () -> Str
//│ fun getTrue: () -> Bool
//│ fun getFalse: () -> Bool
//│ fun getZero: () -> Int
//│ class Foo(x: Int)
//│ fun getClass: () -> Foo
//│ undefined
//│ getString IR:
//│ Basic Block getString ():
//│   return MLscript
//│ 
//│ getTrue IR:
//│ Basic Block getTrue ():
//│   return true
//│ 
//│ getFalse IR:
//│ Basic Block getFalse ():
//│   return false
//│ 
//│ getZero IR:
//│ Basic Block getZero ():
//│   return 0
//│ 
//│ getClass IR:
//│ Basic Block getClass ():
//│   b = alloc Foo
//│   setfield b.x = 10
//│   return b
//│ 
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Function Test 5)
//│   b1 = call getString ()
//│   c1 = call log (b1)
//│   d1 = call getTrue ()
//│   e1 = call log (d1)
//│   f1 = call getFalse ()
//│   g1 = call log (f1)
//│   h1 = call getZero ()
//│   i1 = call log (h1)
//│   j1 = call getClass ()
//│   k = getfield j1, x
//│   l1 = call log (k)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│ 
//│   (func $getString (result i32) 
//│     global.get 0
//│     i32.const 0
//│     i32.add
//│     i32.const 77
//│     i32.store8
//│     global.get 0
//│     i32.const 1
//│     i32.add
//│     i32.const 76
//│     i32.store8
//│     global.get 0
//│     i32.const 2
//│     i32.add
//│     i32.const 115
//│     i32.store8
//│     global.get 0
//│     i32.const 3
//│     i32.add
//│     i32.const 99
//│     i32.store8
//│     global.get 0
//│     i32.const 4
//│     i32.add
//│     i32.const 114
//│     i32.store8
//│     global.get 0
//│     i32.const 5
//│     i32.add
//│     i32.const 105
//│     i32.store8
//│     global.get 0
//│     i32.const 6
//│     i32.add
//│     i32.const 112
//│     i32.store8
//│     global.get 0
//│     i32.const 7
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 8
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     i32.const 9
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     i32.const 10
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     i32.const 11
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     global.set 0
//│   )
//│ 
//│   (func $getTrue (result i32) 
//│     i32.const 1
//│   )
//│ 
//│   (func $getFalse (result i32) 
//│     i32.const 0
//│   )
//│ 
//│   (func $getZero (result i64) 
//│     i64.const 0
//│   )
//│ 
//│   (func $getClass (result i32) (local $b i32) 
//│     global.get 0
//│     local.set $b
//│     global.get 0
//│     i32.const 0
//│     i32.store
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     global.set 0
//│     local.get $b
//│     i32.const 4
//│     i32.add
//│     i64.const 10
//│     i64.store
//│     local.get $b
//│   )
//│   (export "main" (func $main))
//│   (func $main (local $l1 i32) (local $j1 i32) (local $e1 i32) (local $f1 i32) (local $b1 i32) (local $g1 i32) (local $h1 i64) (local $a1 i32) (local $d1 i32) (local $k i64) (local $c1 i32) (local $i1 i32) 
//│     global.get 0
//│     i32.const 0
//│     i32.add
//│     i32.const 70
//│     i32.store8
//│     global.get 0
//│     i32.const 1
//│     i32.add
//│     i32.const 117
//│     i32.store8
//│     global.get 0
//│     i32.const 2
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 3
//│     i32.add
//│     i32.const 99
//│     i32.store8
//│     global.get 0
//│     i32.const 4
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 5
//│     i32.add
//│     i32.const 105
//│     i32.store8
//│     global.get 0
//│     i32.const 6
//│     i32.add
//│     i32.const 111
//│     i32.store8
//│     global.get 0
//│     i32.const 7
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 8
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 9
//│     i32.add
//│     i32.const 84
//│     i32.store8
//│     global.get 0
//│     i32.const 10
//│     i32.add
//│     i32.const 101
//│     i32.store8
//│     global.get 0
//│     i32.const 11
//│     i32.add
//│     i32.const 115
//│     i32.store8
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 13
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 14
//│     i32.add
//│     i32.const 53
//│     i32.store8
//│     global.get 0
//│     i32.const 15
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     global.get 0
//│     i32.const 16
//│     i32.add
//│     global.set 0
//│     i32.const 4
//│     call $logI32
//│     i32.const 0
//│     local.set $a1
//│     call $getString
//│     local.set $b1
//│     local.get $b1
//│     i32.const 4
//│     call $logI32
//│     i32.const 0
//│     local.set $c1
//│     call $getTrue
//│     local.set $d1
//│     local.get $d1
//│     i32.const 1
//│     call $logI32
//│     i32.const 0
//│     local.set $e1
//│     call $getFalse
//│     local.set $f1
//│     local.get $f1
//│     i32.const 1
//│     call $logI32
//│     i32.const 0
//│     local.set $g1
//│     call $getZero
//│     local.set $h1
//│     local.get $h1
//│     call $logI64
//│     i32.const 0
//│     local.set $i1
//│     call $getClass
//│     local.set $j1
//│     local.get $j1
//│     i32.const 4
//│     i32.add
//│     i64.load
//│     local.set $k
//│     local.get $k
//│     call $logI64
//│     i32.const 0
//│     local.set $l1
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Function Test 5
//│ res
//│     = [Function: getString]
//│ res
//│     = [Function: getTrue]
//│ res
//│     = [Function: getFalse]
//│ res
//│     = [Function: getZero]
//│ res
//│     = [Function: getClass]

log of "Function Test 6"
fun Square(x:Int):Int = x*x
fun Cube(x:Int):Int = x*x*x
log of Square(3)+Cube(2)
//│ fun Square: (x: Int,) -> Int
//│ fun Cube: (x: Int,) -> Int
//│ undefined
//│ Square IR:
//│ Basic Block Square (x):
//│   b = Mul x, x
//│   return b
//│ 
//│ Cube IR:
//│ Basic Block Cube (x):
//│   b = Mul x, x
//│   c = Mul b, x
//│   return c
//│ 
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Function Test 6)
//│   b1 = call Square (3)
//│   c1 = call Cube (2)
//│   d = Add b1, c1
//│   e1 = call log (d)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│ 
//│   (func $Square (param $x i64) (result i64) (local $b i64) 
//│     local.get $x
//│     local.get $x
//│     i64.mul
//│     local.set $b
//│     local.get $b
//│   )
//│ 
//│   (func $Cube (param $x i64) (result i64) (local $b i64) (local $c i64) 
//│     local.get $x
//│     local.get $x
//│     i64.mul
//│     local.set $b
//│     local.get $b
//│     local.get $x
//│     i64.mul
//│     local.set $c
//│     local.get $c
//│   )
//│   (export "main" (func $main))
//│   (func $main (local $e1 i32) (local $b1 i64) (local $c1 i64) (local $a1 i32) (local $d i64) 
//│     global.get 0
//│     i32.const 0
//│     i32.add
//│     i32.const 70
//│     i32.store8
//│     global.get 0
//│     i32.const 1
//│     i32.add
//│     i32.const 117
//│     i32.store8
//│     global.get 0
//│     i32.const 2
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 3
//│     i32.add
//│     i32.const 99
//│     i32.store8
//│     global.get 0
//│     i32.const 4
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 5
//│     i32.add
//│     i32.const 105
//│     i32.store8
//│     global.get 0
//│     i32.const 6
//│     i32.add
//│     i32.const 111
//│     i32.store8
//│     global.get 0
//│     i32.const 7
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 8
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 9
//│     i32.add
//│     i32.const 84
//│     i32.store8
//│     global.get 0
//│     i32.const 10
//│     i32.add
//│     i32.const 101
//│     i32.store8
//│     global.get 0
//│     i32.const 11
//│     i32.add
//│     i32.const 115
//│     i32.store8
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 13
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 14
//│     i32.add
//│     i32.const 54
//│     i32.store8
//│     global.get 0
//│     i32.const 15
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     global.get 0
//│     i32.const 16
//│     i32.add
//│     global.set 0
//│     i32.const 4
//│     call $logI32
//│     i32.const 0
//│     local.set $a1
//│     i64.const 3
//│     call $Square
//│     local.set $b1
//│     i64.const 2
//│     call $Cube
//│     local.set $c1
//│     local.get $b1
//│     local.get $c1
//│     i64.add
//│     local.set $d
//│     local.get $d
//│     call $logI64
//│     i32.const 0
//│     local.set $e1
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Function Test 6
//│ res
//│     = [Function: Square]

log of "Function Test 7"
fun addition(x:Int,y:Int):Int = x+y
log of addition(6,7)
//│ fun addition: (x: Int, y: Int,) -> Int
//│ undefined
//│ addition IR:
//│ Basic Block addition (x, y):
//│   b = Add x, y
//│   return b
//│ 
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Function Test 7)
//│   b1 = call addition (6, 7)
//│   c1 = call log (b1)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│ 
//│   (func $addition (param $x i64) (param $y i64) (result i64) (local $b i64) 
//│     local.get $x
//│     local.get $y
//│     i64.add
//│     local.set $b
//│     local.get $b
//│   )
//│   (export "main" (func $main))
//│   (func $main (local $a1 i32) (local $c1 i32) (local $b1 i64) 
//│     global.get 0
//│     i32.const 0
//│     i32.add
//│     i32.const 70
//│     i32.store8
//│     global.get 0
//│     i32.const 1
//│     i32.add
//│     i32.const 117
//│     i32.store8
//│     global.get 0
//│     i32.const 2
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 3
//│     i32.add
//│     i32.const 99
//│     i32.store8
//│     global.get 0
//│     i32.const 4
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 5
//│     i32.add
//│     i32.const 105
//│     i32.store8
//│     global.get 0
//│     i32.const 6
//│     i32.add
//│     i32.const 111
//│     i32.store8
//│     global.get 0
//│     i32.const 7
//│     i32.add
//│     i32.const 110
//│     i32.store8
//│     global.get 0
//│     i32.const 8
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 9
//│     i32.add
//│     i32.const 84
//│     i32.store8
//│     global.get 0
//│     i32.const 10
//│     i32.add
//│     i32.const 101
//│     i32.store8
//│     global.get 0
//│     i32.const 11
//│     i32.add
//│     i32.const 115
//│     i32.store8
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 13
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 14
//│     i32.add
//│     i32.const 55
//│     i32.store8
//│     global.get 0
//│     i32.const 15
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     global.get 0
//│     i32.const 16
//│     i32.add
//│     global.set 0
//│     i32.const 4
//│     call $logI32
//│     i32.const 0
//│     local.set $a1
//│     i64.const 6
//│     i64.const 7
//│     call $addition
//│     local.set $b1
//│     local.get $b1
//│     call $logI64
//│     i32.const 0
//│     local.set $c1
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Function Test 7
//│ res
//│     = [Function: addition]
