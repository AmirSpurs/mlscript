:NewParser
:NewDefs

let fp1 = 0.5
log of fp1
let fp2 = -1.5
log of fp2
//│ let fp1: 0.5
//│ let fp2: -1.5
//│ undefined
//│ entry IR:
//│ Basic Block entry ():
//│   fp11 = 0.5
//│   a1 = call log (fp11)
//│   fp21 = -1.5
//│   b1 = call log (fp21)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│   (export "main" (func $main))
//│   (func $main (local $a1 i32)(local $fp21 f64)(local $fp11 f64)(local $b1 i32)
//│     f64.const 0.5
//│     local.set $fp11
//│     local.get $fp11
//│     call $logF64
//│     i32.const 0
//│     local.set $a1
//│     f64.const -1.5
//│     local.set $fp21
//│     local.get $fp21
//│     call $logF64
//│     i32.const 0
//│     local.set $b1
//│   )
//│ )
//│ 
//│ fp1
//│     = 0.5
//│ res
//│     = undefined
//│ // Output
//│ 0.5
//│ fp2
//│     = -1.5
//│ res
//│     = undefined
//│ // Output
//│ -1.5

//FIXME
log of -0.5
log of 0.5-(0.5)
log of 0.5+0.5
log of 0.5*0.5
log of 0.5/0.5
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.57: 	log of 0.5-(0.5)
//│ ║        	       ^^^^
//│ ╟── decimal literal of type `0.5` is not an instance of type `Int`
//│ ║  l.57: 	log of 0.5-(0.5)
//│ ╙──      	       ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.57: 	log of 0.5-(0.5)
//│ ║        	       ^^^^^^^^^
//│ ╟── decimal literal of type `0.5` is not an instance of type `Int`
//│ ║  l.57: 	log of 0.5-(0.5)
//│ ╙──      	            ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.58: 	log of 0.5+0.5
//│ ║        	       ^^^^
//│ ╟── decimal literal of type `0.5` is not an instance of type `Int`
//│ ║  l.58: 	log of 0.5+0.5
//│ ╙──      	       ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.58: 	log of 0.5+0.5
//│ ║        	       ^^^^^^^
//│ ╟── decimal literal of type `0.5` is not an instance of type `Int`
//│ ║  l.58: 	log of 0.5+0.5
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.59: 	log of 0.5*0.5
//│ ║        	       ^^^^
//│ ╟── decimal literal of type `0.5` is not an instance of type `Int`
//│ ║  l.59: 	log of 0.5*0.5
//│ ╙──      	       ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.59: 	log of 0.5*0.5
//│ ║        	       ^^^^^^^
//│ ╟── decimal literal of type `0.5` is not an instance of type `Int`
//│ ║  l.59: 	log of 0.5*0.5
//│ ╙──      	           ^^^
//│ undefined
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (-0.5)
//│   b = Sub 0.5, 0.5
//│   c1 = call log (b)
//│   d = Add 0.5, 0.5
//│   e1 = call log (d)
//│   f = Mul 0.5, 0.5
//│   g1 = call log (f)
//│   h = Div 0.5, 0.5
//│   i1 = call log (h)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│   (export "main" (func $main))
//│   (func $main (local $e1 i32)(local $f f64)(local $g1 i32)(local $b f64)(local $d f64)(local $c1 i32)(local $i1 i32)(local $h f64)(local $a1 i32)
//│     f64.const -0.5
//│     call $logF64
//│     i32.const 0
//│     local.set $a1
//│     f64.const 0.5
//│     f64.const 0.5
//│     f64.sub
//│     local.set $b
//│     local.get $b
//│     call $logF64
//│     i32.const 0
//│     local.set $c1
//│     f64.const 0.5
//│     f64.const 0.5
//│     f64.add
//│     local.set $d
//│     local.get $d
//│     call $logF64
//│     i32.const 0
//│     local.set $e1
//│     f64.const 0.5
//│     f64.const 0.5
//│     f64.mul
//│     local.set $f
//│     local.get $f
//│     call $logF64
//│     i32.const 0
//│     local.set $g1
//│     f64.const 0.5
//│     f64.const 0.5
//│     f64.div
//│     local.set $h
//│     local.get $h
//│     call $logF64
//│     i32.const 0
//│     local.set $i1
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ -0.5
//│ res
//│     = undefined
//│ // Output
//│ 0
//│ res
//│     = undefined
//│ // Output
//│ 1
//│ res
//│     = undefined
//│ // Output
//│ 0.25
//│ res
//│     = undefined
//│ // Output
//│ 1
