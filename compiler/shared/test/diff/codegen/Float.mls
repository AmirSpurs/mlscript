:NewParser
:NewDefs

let fp1 = 0.5
log of fp1
let fp2 = -1.5
log of fp2
//│ let fp1: 0.5
//│ let fp2: -1.5
//│ undefined
//│ entry IR:
//│ Basic Block entry ():
//│   fp11 = 0.5
//│   a1 = call log (fp11)
//│   fp21 = -1.5
//│   b1 = call log (fp21)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│   (export "main" (func $main))
//│   (func $main (local $a1 i32)(local $fp21 f64)(local $fp11 f64)(local $b1 i32)
//│     f64.const 0.5
//│     local.set $fp11
//│     local.get $fp11
//│     call $logF64
//│     i32.const 0
//│     local.set $a1
//│     f64.const -1.5
//│     local.set $fp21
//│     local.get $fp21
//│     call $logF64
//│     i32.const 0
//│     local.set $b1
//│   )
//│ )
//│ 
//│ fp1
//│     = 0.5
//│ res
//│     = undefined
//│ // Output
//│ 0.5
//│ fp2
//│     = -1.5
//│ res
//│     = undefined
//│ // Output
//│ -1.5

//FIXME
log of -0.5
log of 0.5-(0.5)
log of 0.5+0.5
log of 0.5*0.5
log of 0.5/0.5
let y = 0.5 == 0.5
log of (0.5 == 0.5)
log of (0.5 == 0.1)
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.57: 	log of 0.5-(0.5)
//│ ║        	       ^^^^
//│ ╟── decimal literal of type `0.5` is not an instance of type `Int`
//│ ║  l.57: 	log of 0.5-(0.5)
//│ ╙──      	       ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.57: 	log of 0.5-(0.5)
//│ ║        	       ^^^^^^^^^
//│ ╟── decimal literal of type `0.5` is not an instance of type `Int`
//│ ║  l.57: 	log of 0.5-(0.5)
//│ ╙──      	            ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.58: 	log of 0.5+0.5
//│ ║        	       ^^^^
//│ ╟── decimal literal of type `0.5` is not an instance of type `Int`
//│ ║  l.58: 	log of 0.5+0.5
//│ ╙──      	       ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.58: 	log of 0.5+0.5
//│ ║        	       ^^^^^^^
//│ ╟── decimal literal of type `0.5` is not an instance of type `Int`
//│ ║  l.58: 	log of 0.5+0.5
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.59: 	log of 0.5*0.5
//│ ║        	       ^^^^
//│ ╟── decimal literal of type `0.5` is not an instance of type `Int`
//│ ║  l.59: 	log of 0.5*0.5
//│ ╙──      	       ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.59: 	log of 0.5*0.5
//│ ║        	       ^^^^^^^
//│ ╟── decimal literal of type `0.5` is not an instance of type `Int`
//│ ║  l.59: 	log of 0.5*0.5
//│ ╙──      	           ^^^
//│ let y: Bool
//│ undefined
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (-0.5)
//│   b = Sub 0.5, 0.5
//│   c1 = call log (b)
//│   d = Add 0.5, 0.5
//│   e1 = call log (d)
//│   f = Mul 0.5, 0.5
//│   g1 = call log (f)
//│   h = Div 0.5, 0.5
//│   i1 = call log (h)
//│   j = Eq 0.5, 0.5
//│   y1 = j
//│   k = Eq 0.5, 0.5
//│   l1 = call log (k)
//│   m = Eq 0.5, 0.1
//│   n1 = call log (m)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│   (export "main" (func $main))
//│   (func $main (local $l1 i32)(local $e1 i32)(local $j i32)(local $m i32)(local $g1 i32)(local $b f64)(local $y1 i32)(local $k i32)(local $d f64)(local $n1 i32)(local $f f64)(local $c1 i32)(local $i1 i32)(local $h f64)(local $a1 i32)
//│     f64.const -0.5
//│     call $logF64
//│     i32.const 0
//│     local.set $a1
//│     f64.const 0.5
//│     f64.const 0.5
//│     f64.sub
//│     local.set $b
//│     local.get $b
//│     call $logF64
//│     i32.const 0
//│     local.set $c1
//│     f64.const 0.5
//│     f64.const 0.5
//│     f64.add
//│     local.set $d
//│     local.get $d
//│     call $logF64
//│     i32.const 0
//│     local.set $e1
//│     f64.const 0.5
//│     f64.const 0.5
//│     f64.mul
//│     local.set $f
//│     local.get $f
//│     call $logF64
//│     i32.const 0
//│     local.set $g1
//│     f64.const 0.5
//│     f64.const 0.5
//│     f64.div
//│     local.set $h
//│     local.get $h
//│     call $logF64
//│     i32.const 0
//│     local.set $i1
//│     f64.const 0.5
//│     f64.const 0.5
//│     f64.eq
//│     local.set $j
//│     local.get $j
//│     local.set $y1
//│     f64.const 0.5
//│     f64.const 0.5
//│     f64.eq
//│     local.set $k
//│     local.get $k
//│     i32.const 1
//│     call $logI32
//│     i32.const 0
//│     local.set $l1
//│     f64.const 0.5
//│     f64.const 0.1
//│     f64.eq
//│     local.set $m
//│     local.get $m
//│     i32.const 1
//│     call $logI32
//│     i32.const 0
//│     local.set $n1
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ -0.5
//│ res
//│     = undefined
//│ // Output
//│ 0
//│ res
//│     = undefined
//│ // Output
//│ 1
//│ res
//│     = undefined
//│ // Output
//│ 0.25
//│ res
//│     = undefined
//│ // Output
//│ 1
//│ y
//│   = true
//│ res
//│     = undefined
//│ // Output
//│ true
//│ res
//│     = undefined
//│ // Output
//│ false

fun getInt1():Int = 1
fun getInt2(integer:Int):Int = integer
fun getFloat1():Num = 3.0
fun getFloat2(floating:Num):Num = floating
log of getInt1()
log of getInt2(2)
log of getFloat1()
log of getFloat2(4.0)
//│ fun getInt1: () -> Int
//│ fun getInt2: (integer: Int,) -> Int
//│ fun getFloat1: () -> Num
//│ fun getFloat2: (floating: Num,) -> Num
//│ undefined
//│ getInt1 IR:
//│ Basic Block getInt1 ():
//│   return 1
//│ 
//│ getInt2 IR:
//│ Basic Block getInt2 (integer):
//│   return integer
//│ 
//│ getFloat1 IR:
//│ Basic Block getFloat1 ():
//│   return 3.0
//│ 
//│ getFloat2 IR:
//│ Basic Block getFloat2 (floating):
//│   return floating
//│ 
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call getInt1 ()
//│   b1 = call log (a1)
//│   c1 = call getInt2 (2)
//│   d1 = call log (c1)
//│   e1 = call getFloat1 ()
//│   f1 = call log (e1)
//│   g1 = call getFloat2 (4.0)
//│   h1 = call log (g1)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│ 
//│   (func $getInt1 (result i32) 
//│     i32.const 1
//│   )
//│ 
//│   (func $getInt2 (param $integer i32) (result i32) 
//│     local.get $integer
//│   )
//│ 
//│   (func $getFloat1 (result f64) 
//│     f64.const 3.0
//│   )
//│ 
//│   (func $getFloat2 (param $floating f64) (result f64) 
//│     local.get $floating
//│   )
//│   (export "main" (func $main))
//│   (func $main (local $e1 f64)(local $f1 i32)(local $b1 i32)(local $g1 f64)(local $c1 i32)(local $h1 i32)(local $a1 i32)(local $d1 i32)
//│     call $getInt1
//│     local.set $a1
//│     local.get $a1
//│     i32.const 2
//│     call $logI32
//│     i32.const 0
//│     local.set $b1
//│     i32.const 2
//│     call $getInt2
//│     local.set $c1
//│     local.get $c1
//│     i32.const 2
//│     call $logI32
//│     i32.const 0
//│     local.set $d1
//│     call $getFloat1
//│     local.set $e1
//│     local.get $e1
//│     call $logF64
//│     i32.const 0
//│     local.set $f1
//│     f64.const 4.0
//│     call $getFloat2
//│     local.set $g1
//│     local.get $g1
//│     call $logF64
//│     i32.const 0
//│     local.set $h1
//│   )
//│ )
//│ 
//│ res
//│     = [Function: getInt1]
//│ res
//│     = [Function: getInt2]
//│ res
//│     = [Function: getFloat1]
//│ res
//│     = [Function: getFloat2]
