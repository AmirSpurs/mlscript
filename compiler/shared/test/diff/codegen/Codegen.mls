:NewParser
:NewDefs

let x = 1
//│ IR:
//│ Basic Block entry:
//│   x1 = 1
//│ 
//│ WASM:
//│ Code(List(I32Const(1), SetLocal(0), Comment(TODO)))
//│ let x: 1
//│ x
//│   = 1

let x = {field1:int, field2:int}
//│ IR:
//│ Basic Block entry:
//│   a = alloc {field1: i32, field2: i32}
//│   x1 = a
//│ 
//│ WASM:
//│ Ir2wasm failed: scala.NotImplementedError: an implementation is missing
//│ let x: {field1: Int, field2: Int}
//│ Code generation encountered an error:
//│   type alias int is not a valid expression

if true then 1 else 0
let x = 3
//│ IR:
//│ Basic Block entry:
//│   match true
//│     true () -> b
//│     false () -> c
//│ Basic Block c:
//│   br d ()
//│ Basic Block d:
//│   x1 = 3
//│ Basic Block b:
//│   br d ()
//│ 
//│ WASM:
//│ Ir2wasm failed: scala.NotImplementedError: an implementation is missing
//│ let x: 3
//│ 0 | 1
//│ res
//│     = 1
//│ x
//│   = 3

class IntLit(head:int)
let l = IntLit(2)
if l is
    IntLit(0) then
        let x = 0
    IntLit(1) then
        let x = 1
    IntLit(2) then
        let x = 2
    else
        let x = 3
let y = 1
//│ IR:
//│ Basic Block entry:
//│   new_IntLit1 = alloc IntLit
//│   app_result = call new_IntLit1 (2)
//│   l1 = app_result
//│   match l1
//│     IntLit (0) -> b
//│     IntLit (1) -> c
//│     IntLit (2) -> d
//│     else () -> e
//│ Basic Block e:
//│   x3 = 3
//│   br a ()
//│ Basic Block a:
//│   y1 = 1
//│ Basic Block d:
//│   x2 = 2
//│   br a ()
//│ Basic Block c:
//│   x1 = 1
//│   br a ()
//│ Basic Block b:
//│   x = 0
//│   br a ()
//│ 
//│ WASM:
//│ Ir2wasm failed: scala.NotImplementedError: an implementation is missing
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.51: 	let l = IntLit(2)
//│ ║        	        ^^^^^^^^^
//│ ╟── integer literal of type `2` is not an instance of type `int`
//│ ║  l.51: 	let l = IntLit(2)
//│ ║        	               ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.50: 	class IntLit(head:int)
//│ ╙──      	                  ^^^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.53: 	    IntLit(0) then
//│ ║        	           ^^^^^^^
//│ ║  l.54: 	        let x = 0
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.55: 	    IntLit(1) then
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.56: 	        let x = 1
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	    IntLit(2) then
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.58: 	        let x = 2
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.59: 	    else
//│ ║        	^^^^^^^^
//│ ║  l.60: 	        let x = 3
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of `Object`
//│ ║  l.50: 	class IntLit(head:int)
//│ ║        	                  ^^^
//│ ╟── but it flows into integer literal with expected type `Object`
//│ ║  l.53: 	    IntLit(0) then
//│ ╙──      	           ^
//│ class IntLit(head: int)
//│ let l: IntLit | error
//│ let y: 1
//│ undefined
//│ l
//│   = IntLit {}
//│ res
//│     = undefined
//│ y
//│   = 1
