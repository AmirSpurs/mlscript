:NewParser
:NewDefs

log of "Match Test 1"
let x = if true then 1 else 0
log(x)
//│ let x: 0 | 1
//│ undefined
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Match Test 1)
//│   match true
//│     true -> f ()
//│     _ -> d ()
//│ Basic Block f ():
//│   g = 1
//│   br c (g)
//│ Basic Block d ():
//│   e = 0
//│   br c (e)
//│ Basic Block c (b):
//│   h = b
//│   i1 = call log (h)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│   (export "main" (func $main))
//│   (func $main (local $e i64) (local $i1 i32) (local $b i64) (local $g i64) (local $h i64) (local $a1 i32) 
//│     block $entry
//│       global.get 0
//│       i32.const 0
//│       i32.add
//│       i32.const 77
//│       i32.store8
//│       global.get 0
//│       i32.const 1
//│       i32.add
//│       i32.const 97
//│       i32.store8
//│       global.get 0
//│       i32.const 2
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 3
//│       i32.add
//│       i32.const 99
//│       i32.store8
//│       global.get 0
//│       i32.const 4
//│       i32.add
//│       i32.const 104
//│       i32.store8
//│       global.get 0
//│       i32.const 5
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 6
//│       i32.add
//│       i32.const 84
//│       i32.store8
//│       global.get 0
//│       i32.const 7
//│       i32.add
//│       i32.const 101
//│       i32.store8
//│       global.get 0
//│       i32.const 8
//│       i32.add
//│       i32.const 115
//│       i32.store8
//│       global.get 0
//│       i32.const 9
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 10
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 11
//│       i32.add
//│       i32.const 49
//│       i32.store8
//│       global.get 0
//│       i32.const 12
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 13
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 14
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 15
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       global.get 0
//│       i32.const 16
//│       i32.add
//│       global.set 0
//│       i32.const 4
//│       call $logI32
//│       i32.const 0
//│       local.set $a1
//│       i32.const 1
//│       i32.const 1
//│       i32.eq
//│       if
//│         i64.const 1
//│         local.set $g
//│         local.get $g
//│         local.set $b
//│       else
//│         i64.const 0
//│         local.set $e
//│         local.get $e
//│         local.set $b
//│       end
//│     end
//│     local.get $b
//│     local.set $h
//│     local.get $h
//│     call $logI64
//│     i32.const 0
//│     local.set $i1
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Match Test 1
//│ x
//│   = 1
//│ res
//│     = undefined
//│ // Output
//│ 1

log of "Match Test 2"
let x = if true&&false then 0 else 10
let y = if (x+10==10) then 100 else 200
log(x)
log(y)
//│ let x: 0 | 10
//│ let y: 100 | 200
//│ undefined
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Match Test 2)
//│   h = And true, false
//│   match h
//│     true -> f ()
//│     _ -> d ()
//│ Basic Block f ():
//│   g = 0
//│   br c (g)
//│ Basic Block d ():
//│   e = 10
//│   br c (e)
//│ Basic Block c (b):
//│   i = b
//│   p = Add i, 10
//│   q = Eq p, 10
//│   match q
//│     true -> n ()
//│     _ -> l ()
//│ Basic Block n ():
//│   o = 100
//│   br k (o)
//│ Basic Block l ():
//│   m = 200
//│   br k (m)
//│ Basic Block k (j):
//│   r = j
//│   s1 = call log (i)
//│   t1 = call log (r)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│   (export "main" (func $main))
//│   (func $main (local $e i64) (local $j i64) (local $m i64) (local $i i64) (local $p i64) (local $r i64) (local $t1 i32) (local $o i64) (local $q i32) (local $b i64) (local $g i64) (local $s1 i32) (local $h i32) (local $a1 i32) 
//│     block $entry
//│       global.get 0
//│       i32.const 0
//│       i32.add
//│       i32.const 77
//│       i32.store8
//│       global.get 0
//│       i32.const 1
//│       i32.add
//│       i32.const 97
//│       i32.store8
//│       global.get 0
//│       i32.const 2
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 3
//│       i32.add
//│       i32.const 99
//│       i32.store8
//│       global.get 0
//│       i32.const 4
//│       i32.add
//│       i32.const 104
//│       i32.store8
//│       global.get 0
//│       i32.const 5
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 6
//│       i32.add
//│       i32.const 84
//│       i32.store8
//│       global.get 0
//│       i32.const 7
//│       i32.add
//│       i32.const 101
//│       i32.store8
//│       global.get 0
//│       i32.const 8
//│       i32.add
//│       i32.const 115
//│       i32.store8
//│       global.get 0
//│       i32.const 9
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 10
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 11
//│       i32.add
//│       i32.const 50
//│       i32.store8
//│       global.get 0
//│       i32.const 12
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 13
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 14
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 15
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       global.get 0
//│       i32.const 16
//│       i32.add
//│       global.set 0
//│       i32.const 4
//│       call $logI32
//│       i32.const 0
//│       local.set $a1
//│       i32.const 1
//│       i32.const 0
//│       i32.and
//│       local.set $h
//│       local.get $h
//│       i32.const 1
//│       i32.eq
//│       if
//│         i64.const 0
//│         local.set $g
//│         local.get $g
//│         local.set $b
//│       else
//│         i64.const 10
//│         local.set $e
//│         local.get $e
//│         local.set $b
//│       end
//│     end
//│     block $c
//│       local.get $b
//│       local.set $i
//│       local.get $i
//│       i64.const 10
//│       i64.add
//│       local.set $p
//│       local.get $p
//│       i64.const 10
//│       i64.eq
//│       local.set $q
//│       local.get $q
//│       i32.const 1
//│       i32.eq
//│       if
//│         i64.const 100
//│         local.set $o
//│         local.get $o
//│         local.set $j
//│       else
//│         i64.const 200
//│         local.set $m
//│         local.get $m
//│         local.set $j
//│       end
//│     end
//│     local.get $j
//│     local.set $r
//│     local.get $i
//│     call $logI64
//│     i32.const 0
//│     local.set $s1
//│     local.get $r
//│     call $logI64
//│     i32.const 0
//│     local.set $t1
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Match Test 2
//│ x
//│   = 10
//│ y
//│   = 200
//│ res
//│     = undefined
//│ // Output
//│ 10
//│ res
//│     = undefined
//│ // Output
//│ 200

log of "Match Test 3"
if 51 is
  51 then log(51)
  52 then log(52)
  53 then log(53)
  54 then log(54)
  else log(55)
//│ undefined
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Match Test 3)
//│   tmp0 = 51
//│   tmp01 = 51
//│   match tmp01
//│     52 -> j ()
//│     51 -> g ()
//│     53 -> m ()
//│     54 -> p ()
//│     _ -> d ()
//│ Basic Block j ():
//│   l1 = call log (52)
//│   k = l1
//│   br c (k)
//│ Basic Block g ():
//│   i1 = call log (51)
//│   h = i1
//│   br c (h)
//│ Basic Block m ():
//│   o1 = call log (53)
//│   n = o1
//│   br c (n)
//│ Basic Block p ():
//│   r1 = call log (54)
//│   q = r1
//│   br c (q)
//│ Basic Block d ():
//│   f1 = call log (55)
//│   e = f1
//│   br c (e)
//│ Basic Block c (b):
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│   (export "main" (func $main))
//│   (func $main (local $tmp01 i64) (local $n i32) (local $f1 i32) (local $tmp0 i64) (local $i1 i32) (local $r1 i32) (local $o1 i32) (local $k i32) (local $e i32) (local $l1 i32) (local $q i32) (local $b i32) (local $h i32) (local $a1 i32) 
//│     block $entry
//│       global.get 0
//│       i32.const 0
//│       i32.add
//│       i32.const 77
//│       i32.store8
//│       global.get 0
//│       i32.const 1
//│       i32.add
//│       i32.const 97
//│       i32.store8
//│       global.get 0
//│       i32.const 2
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 3
//│       i32.add
//│       i32.const 99
//│       i32.store8
//│       global.get 0
//│       i32.const 4
//│       i32.add
//│       i32.const 104
//│       i32.store8
//│       global.get 0
//│       i32.const 5
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 6
//│       i32.add
//│       i32.const 84
//│       i32.store8
//│       global.get 0
//│       i32.const 7
//│       i32.add
//│       i32.const 101
//│       i32.store8
//│       global.get 0
//│       i32.const 8
//│       i32.add
//│       i32.const 115
//│       i32.store8
//│       global.get 0
//│       i32.const 9
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 10
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 11
//│       i32.add
//│       i32.const 51
//│       i32.store8
//│       global.get 0
//│       i32.const 12
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 13
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 14
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 15
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       global.get 0
//│       i32.const 16
//│       i32.add
//│       global.set 0
//│       i32.const 4
//│       call $logI32
//│       i32.const 0
//│       local.set $a1
//│       i64.const 51
//│       local.set $tmp0
//│       i64.const 51
//│       local.set $tmp01
//│       block $d
//│         block $j
//│           block $g
//│             block $m
//│               block $p
//│                 block $Match_tmp01
//│                   local.get $tmp01
//│                   i64.const 52
//│                   i64.eq
//│                   i32.const 1
//│                   i32.mul
//│                   local.get $tmp01
//│                   i64.const 51
//│                   i64.eq
//│                   i32.const 2
//│                   i32.mul
//│                   i32.add
//│                   local.get $tmp01
//│                   i64.const 53
//│                   i64.eq
//│                   i32.const 3
//│                   i32.mul
//│                   i32.add
//│                   local.get $tmp01
//│                   i64.const 54
//│                   i64.eq
//│                   i32.const 4
//│                   i32.mul
//│                   i32.add
//│                   br_table 4 3 2 1 0
//│                 end
//│                 i64.const 54
//│                 call $logI64
//│                 i32.const 0
//│                 local.set $r1
//│                 local.get $r1
//│                 local.set $q
//│                 local.get $q
//│                 local.set $b
//│                 br $d
//│               end
//│               i64.const 53
//│               call $logI64
//│               i32.const 0
//│               local.set $o1
//│               local.get $o1
//│               local.set $n
//│               local.get $n
//│               local.set $b
//│               br $d
//│             end
//│             i64.const 51
//│             call $logI64
//│             i32.const 0
//│             local.set $i1
//│             local.get $i1
//│             local.set $h
//│             local.get $h
//│             local.set $b
//│             br $d
//│           end
//│           i64.const 52
//│           call $logI64
//│           i32.const 0
//│           local.set $l1
//│           local.get $l1
//│           local.set $k
//│           local.get $k
//│           local.set $b
//│           br $d
//│         end
//│         i64.const 55
//│         call $logI64
//│         i32.const 0
//│         local.set $f1
//│         local.get $f1
//│         local.set $e
//│         local.get $e
//│         local.set $b
//│       end
//│     end
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Match Test 3
//│ res
//│     = undefined
//│ // Output
//│ 51

log of "Match Test 4"
class A()
class B()
class C()
let x = C()
if x is
  A() then log(10)
  B() then log(20)
  C() then log(30)
  else log(40)
//│ class A()
//│ class B()
//│ class C()
//│ let x: C
//│ undefined
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Match Test 4)
//│   b = alloc C
//│   c = b
//│   match c
//│     A -> i ()
//│     B -> m ()
//│     C -> q ()
//│     _ -> f ()
//│ Basic Block i ():
//│   j = cast c, A
//│   l1 = call log (10)
//│   k = l1
//│   br e (k)
//│ Basic Block m ():
//│   n = cast c, B
//│   p1 = call log (20)
//│   o = p1
//│   br e (o)
//│ Basic Block q ():
//│   r = cast c, C
//│   t1 = call log (30)
//│   s = t1
//│   br e (s)
//│ Basic Block f ():
//│   h1 = call log (40)
//│   g = h1
//│   br e (g)
//│ Basic Block e (d):
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│   (export "main" (func $main))
//│   (func $main (local $l1 i32) (local $s i32) (local $n i32) (local $j i32) (local $b i32) (local $g i32) (local $h1 i32) (local $r i32) (local $t1 i32) (local $p1 i32) (local $k i32) (local $c i32) (local $a1 i32) (local $o i32) (local $d i32) 
//│     block $entry
//│       global.get 0
//│       i32.const 0
//│       i32.add
//│       i32.const 77
//│       i32.store8
//│       global.get 0
//│       i32.const 1
//│       i32.add
//│       i32.const 97
//│       i32.store8
//│       global.get 0
//│       i32.const 2
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 3
//│       i32.add
//│       i32.const 99
//│       i32.store8
//│       global.get 0
//│       i32.const 4
//│       i32.add
//│       i32.const 104
//│       i32.store8
//│       global.get 0
//│       i32.const 5
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 6
//│       i32.add
//│       i32.const 84
//│       i32.store8
//│       global.get 0
//│       i32.const 7
//│       i32.add
//│       i32.const 101
//│       i32.store8
//│       global.get 0
//│       i32.const 8
//│       i32.add
//│       i32.const 115
//│       i32.store8
//│       global.get 0
//│       i32.const 9
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 10
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 11
//│       i32.add
//│       i32.const 52
//│       i32.store8
//│       global.get 0
//│       i32.const 12
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 13
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 14
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 15
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       global.get 0
//│       i32.const 16
//│       i32.add
//│       global.set 0
//│       i32.const 4
//│       call $logI32
//│       i32.const 0
//│       local.set $a1
//│       global.get 0
//│       local.set $b
//│       global.get 0
//│       i32.const 2
//│       i32.store
//│       global.get 0
//│       i32.const 4
//│       i32.add
//│       global.set 0
//│       local.get $b
//│       local.set $c
//│       block $f
//│         block $i
//│           block $m
//│             block $q
//│               block $Match_c
//│                 local.get $c
//│                 i32.load
//│                 i32.const 0
//│                 i32.eq
//│                 i32.const 1
//│                 i32.mul
//│                 local.get $c
//│                 i32.load
//│                 i32.const 1
//│                 i32.eq
//│                 i32.const 2
//│                 i32.mul
//│                 i32.add
//│                 local.get $c
//│                 i32.load
//│                 i32.const 2
//│                 i32.eq
//│                 i32.const 3
//│                 i32.mul
//│                 i32.add
//│                 br_table 3 2 1 0
//│               end
//│               local.get $c
//│               local.set $r
//│               i64.const 30
//│               call $logI64
//│               i32.const 0
//│               local.set $t1
//│               local.get $t1
//│               local.set $s
//│               local.get $s
//│               local.set $d
//│               br $f
//│             end
//│             local.get $c
//│             local.set $n
//│             i64.const 20
//│             call $logI64
//│             i32.const 0
//│             local.set $p1
//│             local.get $p1
//│             local.set $o
//│             local.get $o
//│             local.set $d
//│             br $f
//│           end
//│           local.get $c
//│           local.set $j
//│           i64.const 10
//│           call $logI64
//│           i32.const 0
//│           local.set $l1
//│           local.get $l1
//│           local.set $k
//│           local.get $k
//│           local.set $d
//│           br $f
//│         end
//│         i64.const 40
//│         call $logI64
//│         i32.const 0
//│         local.set $h1
//│         local.get $h1
//│         local.set $g
//│         local.get $g
//│         local.set $d
//│       end
//│     end
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Match Test 4
//│ x
//│   = C {}
//│ res
//│     = undefined
//│ // Output
//│ 30

log of "Match Test 5"
class IntLit(value:Int)
let l = IntLit(100)
if l is
  IntLit(100) then log(100)
  IntLit(101) then log(101)
  IntLit(102) then log(102)
  else log(103)
//│ class IntLit(value: Int)
//│ let l: IntLit
//│ undefined
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Match Test 5)
//│   b = alloc IntLit
//│   setfield b.value = 100
//│   c = b
//│   match c
//│     IntLit -> i ()
//│     _ -> f ()
//│ Basic Block i ():
//│   j = cast c, IntLit
//│   k = getfield j, value
//│   tmp1 = k
//│   match tmp1
//│     102 -> w ()
//│     100 -> q ()
//│     101 -> t ()
//│     _ -> n ()
//│ Basic Block f ():
//│   h1 = call log (103)
//│   g = h1
//│   br e (g)
//│ Basic Block w ():
//│   y1 = call log (102)
//│   x = y1
//│   br e (x)
//│ Basic Block q ():
//│   s1 = call log (100)
//│   r = s1
//│   br e (r)
//│ Basic Block t ():
//│   v1 = call log (101)
//│   u = v1
//│   br e (u)
//│ Basic Block n ():
//│   p1 = call log (103)
//│   o = p1
//│   br e (o)
//│ Basic Block e (d):
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│   (export "main" (func $main))
//│   (func $main (local $x i32) (local $j i32) (local $u i32) (local $v1 i32) (local $b i32) (local $h1 i32) (local $tmp1 i64) (local $r i32) (local $p1 i32) (local $k i64) (local $g i32) (local $y1 i32) (local $s1 i32) (local $c i32) (local $a1 i32) (local $o i32) (local $d i32) 
//│     block $entry
//│       global.get 0
//│       i32.const 0
//│       i32.add
//│       i32.const 77
//│       i32.store8
//│       global.get 0
//│       i32.const 1
//│       i32.add
//│       i32.const 97
//│       i32.store8
//│       global.get 0
//│       i32.const 2
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 3
//│       i32.add
//│       i32.const 99
//│       i32.store8
//│       global.get 0
//│       i32.const 4
//│       i32.add
//│       i32.const 104
//│       i32.store8
//│       global.get 0
//│       i32.const 5
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 6
//│       i32.add
//│       i32.const 84
//│       i32.store8
//│       global.get 0
//│       i32.const 7
//│       i32.add
//│       i32.const 101
//│       i32.store8
//│       global.get 0
//│       i32.const 8
//│       i32.add
//│       i32.const 115
//│       i32.store8
//│       global.get 0
//│       i32.const 9
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 10
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 11
//│       i32.add
//│       i32.const 53
//│       i32.store8
//│       global.get 0
//│       i32.const 12
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 13
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 14
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 15
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       global.get 0
//│       i32.const 16
//│       i32.add
//│       global.set 0
//│       i32.const 4
//│       call $logI32
//│       i32.const 0
//│       local.set $a1
//│       global.get 0
//│       local.set $b
//│       global.get 0
//│       i32.const 0
//│       i32.store
//│       global.get 0
//│       i32.const 12
//│       i32.add
//│       global.set 0
//│       local.get $b
//│       i32.const 4
//│       i32.add
//│       i64.const 100
//│       i64.store
//│       local.get $b
//│       local.set $c
//│       local.get $c
//│       i32.load
//│       i32.const 0
//│       i32.eq
//│       if
//│         local.get $c
//│         local.set $j
//│         local.get $j
//│         i32.const 4
//│         i32.add
//│         i64.load
//│         local.set $k
//│         local.get $k
//│         local.set $tmp1
//│         block $n
//│           block $w
//│             block $q
//│               block $t
//│                 block $Match_tmp1
//│                   local.get $tmp1
//│                   i64.const 102
//│                   i64.eq
//│                   i32.const 1
//│                   i32.mul
//│                   local.get $tmp1
//│                   i64.const 100
//│                   i64.eq
//│                   i32.const 2
//│                   i32.mul
//│                   i32.add
//│                   local.get $tmp1
//│                   i64.const 101
//│                   i64.eq
//│                   i32.const 3
//│                   i32.mul
//│                   i32.add
//│                   br_table 3 2 1 0
//│                 end
//│                 i64.const 101
//│                 call $logI64
//│                 i32.const 0
//│                 local.set $v1
//│                 local.get $v1
//│                 local.set $u
//│                 local.get $u
//│                 local.set $d
//│                 br $n
//│               end
//│               i64.const 100
//│               call $logI64
//│               i32.const 0
//│               local.set $s1
//│               local.get $s1
//│               local.set $r
//│               local.get $r
//│               local.set $d
//│               br $n
//│             end
//│             i64.const 102
//│             call $logI64
//│             i32.const 0
//│             local.set $y1
//│             local.get $y1
//│             local.set $x
//│             local.get $x
//│             local.set $d
//│             br $n
//│           end
//│           i64.const 103
//│           call $logI64
//│           i32.const 0
//│           local.set $p1
//│           local.get $p1
//│           local.set $o
//│           local.get $o
//│           local.set $d
//│         end
//│       else
//│         i64.const 103
//│         call $logI64
//│         i32.const 0
//│         local.set $h1
//│         local.get $h1
//│         local.set $g
//│         local.get $g
//│         local.set $d
//│       end
//│     end
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Match Test 5
//│ l
//│   = IntLit {}
//│ res
//│     = undefined
//│ // Output
//│ 100

log of "Match Test 6"
class Position(x: Int, y: Int)
let pos = Position(5,12)
let length = if pos is
  Position(3,4) then log(5)
  Position(4,3) then log(5)
  Position(5,12) then log(13)
  Position(12,5) then log(13)
  else log(1)
//│ class Position(x: Int, y: Int)
//│ let pos: Position
//│ let length: undefined
//│ undefined
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Match Test 6)
//│   b = alloc Position
//│   setfield b.x = 5
//│   setfield b.y = 12
//│   c = b
//│   match c
//│     Position -> i ()
//│     _ -> f ()
//│ Basic Block i ():
//│   j = cast c, Position
//│   k = getfield j, x
//│   tmp2 = k
//│   l = getfield j, y
//│   tmp3 = l
//│   match tmp2
//│     3 -> q ()
//│     12 -> ap ()
//│     5 -> ah ()
//│     4 -> y ()
//│     _ -> n ()
//│ Basic Block f ():
//│   h1 = call log (1)
//│   g = h1
//│   br e (g)
//│ Basic Block q ():
//│   match tmp3
//│     4 -> v ()
//│     _ -> s ()
//│ Basic Block ap ():
//│   match tmp3
//│     5 -> au ()
//│     _ -> ar ()
//│ Basic Block ah ():
//│   match tmp3
//│     12 -> am ()
//│     _ -> aj ()
//│ Basic Block y ():
//│   match tmp3
//│     3 -> ae ()
//│     _ -> ab ()
//│ Basic Block n ():
//│   p1 = call log (1)
//│   o = p1
//│   br e (o)
//│ Basic Block e (d):
//│   ax = d
//│ Basic Block v ():
//│   x1 = call log (5)
//│   w = x1
//│   br e (w)
//│ Basic Block s ():
//│   u1 = call log (1)
//│   t = u1
//│   br e (t)
//│ Basic Block au ():
//│   aw1 = call log (13)
//│   av = aw1
//│   br e (av)
//│ Basic Block ar ():
//│   at1 = call log (1)
//│   as = at1
//│   br e (as)
//│ Basic Block am ():
//│   ao1 = call log (13)
//│   an = ao1
//│   br e (an)
//│ Basic Block aj ():
//│   al1 = call log (1)
//│   ak = al1
//│   br e (ak)
//│ Basic Block ae ():
//│   ag1 = call log (5)
//│   af = ag1
//│   br e (af)
//│ Basic Block ab ():
//│   ad1 = call log (1)
//│   ac = ad1
//│   br e (ac)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│   (export "main" (func $main))
//│   (func $main (local $tmp2 i64) (local $at1 i32) (local $ad1 i32) (local $j i32) (local $af i32) (local $an i32) (local $w i32) (local $p1 i32) (local $k i64) (local $ao1 i32) (local $ag1 i32) (local $av i32) (local $u1 i32) (local $t i32) (local $as i32) (local $tmp3 i64) (local $ac i32) (local $b i32) (local $g i32) (local $l i64) (local $aw1 i32) (local $al1 i32) (local $ax i32) (local $x1 i32) (local $ak i32) (local $h1 i32) (local $c i32) (local $a1 i32) (local $o i32) (local $d i32) 
//│     block $entry
//│       global.get 0
//│       i32.const 0
//│       i32.add
//│       i32.const 77
//│       i32.store8
//│       global.get 0
//│       i32.const 1
//│       i32.add
//│       i32.const 97
//│       i32.store8
//│       global.get 0
//│       i32.const 2
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 3
//│       i32.add
//│       i32.const 99
//│       i32.store8
//│       global.get 0
//│       i32.const 4
//│       i32.add
//│       i32.const 104
//│       i32.store8
//│       global.get 0
//│       i32.const 5
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 6
//│       i32.add
//│       i32.const 84
//│       i32.store8
//│       global.get 0
//│       i32.const 7
//│       i32.add
//│       i32.const 101
//│       i32.store8
//│       global.get 0
//│       i32.const 8
//│       i32.add
//│       i32.const 115
//│       i32.store8
//│       global.get 0
//│       i32.const 9
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 10
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 11
//│       i32.add
//│       i32.const 54
//│       i32.store8
//│       global.get 0
//│       i32.const 12
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 13
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 14
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 15
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       global.get 0
//│       i32.const 16
//│       i32.add
//│       global.set 0
//│       i32.const 4
//│       call $logI32
//│       i32.const 0
//│       local.set $a1
//│       global.get 0
//│       local.set $b
//│       global.get 0
//│       i32.const 0
//│       i32.store
//│       global.get 0
//│       i32.const 20
//│       i32.add
//│       global.set 0
//│       local.get $b
//│       i32.const 4
//│       i32.add
//│       i64.const 5
//│       i64.store
//│       local.get $b
//│       i32.const 12
//│       i32.add
//│       i64.const 12
//│       i64.store
//│       local.get $b
//│       local.set $c
//│       local.get $c
//│       i32.load
//│       i32.const 0
//│       i32.eq
//│       if
//│         local.get $c
//│         local.set $j
//│         local.get $j
//│         i32.const 4
//│         i32.add
//│         i64.load
//│         local.set $k
//│         local.get $k
//│         local.set $tmp2
//│         local.get $j
//│         i32.const 12
//│         i32.add
//│         i64.load
//│         local.set $l
//│         local.get $l
//│         local.set $tmp3
//│         block $n
//│           block $q
//│             block $ap
//│               block $ah
//│                 block $y
//│                   block $Match_tmp2
//│                     local.get $tmp2
//│                     i64.const 3
//│                     i64.eq
//│                     i32.const 1
//│                     i32.mul
//│                     local.get $tmp2
//│                     i64.const 12
//│                     i64.eq
//│                     i32.const 2
//│                     i32.mul
//│                     i32.add
//│                     local.get $tmp2
//│                     i64.const 5
//│                     i64.eq
//│                     i32.const 3
//│                     i32.mul
//│                     i32.add
//│                     local.get $tmp2
//│                     i64.const 4
//│                     i64.eq
//│                     i32.const 4
//│                     i32.mul
//│                     i32.add
//│                     br_table 4 3 2 1 0
//│                   end
//│                   local.get $tmp3
//│                   i64.const 3
//│                   i64.eq
//│                   if
//│                     i64.const 5
//│                     call $logI64
//│                     i32.const 0
//│                     local.set $ag1
//│                     local.get $ag1
//│                     local.set $af
//│                     local.get $af
//│                     local.set $d
//│                   else
//│                     i64.const 1
//│                     call $logI64
//│                     i32.const 0
//│                     local.set $ad1
//│                     local.get $ad1
//│                     local.set $ac
//│                     local.get $ac
//│                     local.set $d
//│                   end
//│                   br $n
//│                 end
//│                 local.get $tmp3
//│                 i64.const 12
//│                 i64.eq
//│                 if
//│                   i64.const 13
//│                   call $logI64
//│                   i32.const 0
//│                   local.set $ao1
//│                   local.get $ao1
//│                   local.set $an
//│                   local.get $an
//│                   local.set $d
//│                 else
//│                   i64.const 1
//│                   call $logI64
//│                   i32.const 0
//│                   local.set $al1
//│                   local.get $al1
//│                   local.set $ak
//│                   local.get $ak
//│                   local.set $d
//│                 end
//│                 br $n
//│               end
//│               local.get $tmp3
//│               i64.const 5
//│               i64.eq
//│               if
//│                 i64.const 13
//│                 call $logI64
//│                 i32.const 0
//│                 local.set $aw1
//│                 local.get $aw1
//│                 local.set $av
//│                 local.get $av
//│                 local.set $d
//│               else
//│                 i64.const 1
//│                 call $logI64
//│                 i32.const 0
//│                 local.set $at1
//│                 local.get $at1
//│                 local.set $as
//│                 local.get $as
//│                 local.set $d
//│               end
//│               br $n
//│             end
//│             local.get $tmp3
//│             i64.const 4
//│             i64.eq
//│             if
//│               i64.const 5
//│               call $logI64
//│               i32.const 0
//│               local.set $x1
//│               local.get $x1
//│               local.set $w
//│               local.get $w
//│               local.set $d
//│             else
//│               i64.const 1
//│               call $logI64
//│               i32.const 0
//│               local.set $u1
//│               local.get $u1
//│               local.set $t
//│               local.get $t
//│               local.set $d
//│             end
//│             br $n
//│           end
//│           i64.const 1
//│           call $logI64
//│           i32.const 0
//│           local.set $p1
//│           local.get $p1
//│           local.set $o
//│           local.get $o
//│           local.set $d
//│         end
//│       else
//│         i64.const 1
//│         call $logI64
//│         i32.const 0
//│         local.set $h1
//│         local.get $h1
//│         local.set $g
//│         local.get $g
//│         local.set $d
//│       end
//│     end
//│     local.get $d
//│     local.set $ax
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Match Test 6
//│ pos
//│     = Position {}
//│ length
//│        = undefined
//│ // Output
//│ 13

log of "Match Test 7"
let x = 1
if x is
  1 then 
    if x is
      1 then log(10)
      else log(5)
  else
    if x is
      1 then log(-10)
      else log(-5)
//│ let x: 1
//│ undefined
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Match Test 7)
//│   b = 1
//│   match b
//│     1 -> o ()
//│     _ -> e ()
//│ Basic Block o ():
//│   match b
//│     1 -> v ()
//│     _ -> s ()
//│   p = q
//│   br d (p)
//│ Basic Block e ():
//│   match b
//│     1 -> l ()
//│     _ -> i ()
//│   f = g
//│   br d (f)
//│ Basic Block v ():
//│   y1 = call log (10)
//│   w = y1
//│   br r (w)
//│ Basic Block s ():
//│   u1 = call log (5)
//│   t = u1
//│   br r (t)
//│ Basic Block d (c):
//│ Basic Block l ():
//│   n1 = call log (-10)
//│   m = n1
//│   br h (m)
//│ Basic Block i ():
//│   k1 = call log (-5)
//│   j = k1
//│   br h (j)
//│ Basic Block r (q):
//│ Basic Block h (g):
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│   (export "main" (func $main))
//│   (func $main (local $j i32) (local $n1 i32) (local $m i32) (local $k1 i32) (local $a1 i32) (local $w i32) (local $u1 i32) (local $t i32) (local $q i32) (local $b i64) (local $g i32) (local $y1 i32) 
//│     global.get 0
//│     i32.const 0
//│     i32.add
//│     i32.const 77
//│     i32.store8
//│     global.get 0
//│     i32.const 1
//│     i32.add
//│     i32.const 97
//│     i32.store8
//│     global.get 0
//│     i32.const 2
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 3
//│     i32.add
//│     i32.const 99
//│     i32.store8
//│     global.get 0
//│     i32.const 4
//│     i32.add
//│     i32.const 104
//│     i32.store8
//│     global.get 0
//│     i32.const 5
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 6
//│     i32.add
//│     i32.const 84
//│     i32.store8
//│     global.get 0
//│     i32.const 7
//│     i32.add
//│     i32.const 101
//│     i32.store8
//│     global.get 0
//│     i32.const 8
//│     i32.add
//│     i32.const 115
//│     i32.store8
//│     global.get 0
//│     i32.const 9
//│     i32.add
//│     i32.const 116
//│     i32.store8
//│     global.get 0
//│     i32.const 10
//│     i32.add
//│     i32.const 32
//│     i32.store8
//│     global.get 0
//│     i32.const 11
//│     i32.add
//│     i32.const 55
//│     i32.store8
//│     global.get 0
//│     i32.const 12
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     i32.const 13
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     i32.const 14
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     i32.const 15
//│     i32.add
//│     i32.const 0
//│     i32.store8
//│     global.get 0
//│     global.get 0
//│     i32.const 16
//│     i32.add
//│     global.set 0
//│     i32.const 4
//│     call $logI32
//│     i32.const 0
//│     local.set $a1
//│     i64.const 1
//│     local.set $b
//│     local.get $b
//│     i64.const 1
//│     i64.eq
//│     if
//│       block $o
//│         local.get $b
//│         i64.const 1
//│         i64.eq
//│         if
//│           i64.const 10
//│           call $logI64
//│           i32.const 0
//│           local.set $y1
//│           local.get $y1
//│           local.set $w
//│           local.get $w
//│           local.set $q
//│         else
//│           i64.const 5
//│           call $logI64
//│           i32.const 0
//│           local.set $u1
//│           local.get $u1
//│           local.set $t
//│           local.get $t
//│           local.set $q
//│         end
//│       end
//│     else
//│       block $e
//│         local.get $b
//│         i64.const 1
//│         i64.eq
//│         if
//│           i64.const -10
//│           call $logI64
//│           i32.const 0
//│           local.set $n1
//│           local.get $n1
//│           local.set $m
//│           local.get $m
//│           local.set $g
//│         else
//│           i64.const -5
//│           call $logI64
//│           i32.const 0
//│           local.set $k1
//│           local.get $k1
//│           local.set $j
//│           local.get $j
//│           local.set $g
//│         end
//│       end
//│     end
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Match Test 7
//│ x
//│   = 1
//│ res
//│     = undefined
//│ // Output
//│ 10

log of "Match Test 8"
class One(x1:Int)
class Two(x1:Int,x2:Int) extends One(x1)
class Three(x1:Int,x2:Int,x3:Int) extends One(x1)
class Four(x1:Int,x2:Int,x3:Int,x4:Int) extends One(x1)
let result = if Three(1,2,3) is
  Two(0,0) then log(0)
  Two(1,2) then log(1)
  Three(0,0,0) then log(2)
  Three(1,2,3) then log(3)
  Four(0,0,0,0) then log(4)
  Four(1,2,3,4) then log(5)
  else log(6)
//│ class One(x1: Int)
//│ class Two(x1: Int, x2: Int) extends One
//│ class Three(x1: Int, x2: Int, x3: Int) extends One
//│ class Four(x1: Int, x2: Int, x3: Int, x4: Int) extends One
//│ let result: undefined
//│ undefined
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Match Test 8)
//│   b = alloc Three
//│   setfield b.x1 = 1
//│   setfield b.x2 = 2
//│   setfield b.x3 = 3
//│   tmp4 = b
//│   match tmp4
//│     Two -> h ()
//│     Three -> ag ()
//│     Four -> br ()
//│     _ -> e ()
//│ Basic Block h ():
//│   i = cast tmp4, Two
//│   j = getfield i, x1
//│   tmp5 = j
//│   k = getfield i, x2
//│   tmp6 = k
//│   match tmp5
//│     0 -> p ()
//│     1 -> x ()
//│     _ -> m ()
//│ Basic Block ag ():
//│   ah = cast tmp4, Three
//│   ai = getfield ah, x1
//│   tmp51 = ai
//│   aj = getfield ah, x2
//│   tmp61 = aj
//│   ak = getfield ah, x3
//│   tmp7 = ak
//│   match tmp51
//│     0 -> ap ()
//│     1 -> be ()
//│     _ -> am ()
//│ Basic Block br ():
//│   bs = cast tmp4, Four
//│   bt = getfield bs, x1
//│   tmp52 = bt
//│   bu = getfield bs, x2
//│   tmp62 = bu
//│   bv = getfield bs, x3
//│   tmp71 = bv
//│   bw = getfield bs, x4
//│   tmp8 = bw
//│   match tmp52
//│     0 -> ce ()
//│     1 -> cw ()
//│     _ -> by ()
//│ Basic Block e ():
//│   g1 = call log (6)
//│   f = g1
//│   br d (f)
//│ Basic Block p ():
//│   match tmp6
//│     0 -> u ()
//│     _ -> r ()
//│ Basic Block x ():
//│   match tmp6
//│     2 -> ad ()
//│     _ -> z ()
//│ Basic Block m ():
//│   o1 = call log (6)
//│   n = o1
//│   br d (n)
//│ Basic Block ap ():
//│   match tmp61
//│     0 -> au ()
//│     _ -> ar ()
//│ Basic Block be ():
//│   match tmp61
//│     2 -> bj ()
//│     _ -> bg ()
//│ Basic Block am ():
//│   ao1 = call log (6)
//│   an = ao1
//│   br d (an)
//│ Basic Block ce ():
//│   match tmp62
//│     0 -> cj ()
//│     _ -> cg ()
//│ Basic Block cw ():
//│   match tmp62
//│     2 -> df ()
//│     _ -> cy ()
//│ Basic Block by ():
//│   cd1 = call log (6)
//│   bz = cd1
//│   br d (bz)
//│ Basic Block d (c):
//│   ds = c
//│ Basic Block u ():
//│   w1 = call log (0)
//│   v = w1
//│   br d (v)
//│ Basic Block r ():
//│   t1 = call log (6)
//│   s = t1
//│   br d (s)
//│ Basic Block ad ():
//│   af1 = call log (1)
//│   ae = af1
//│   br d (ae)
//│ Basic Block z ():
//│   ac1 = call log (6)
//│   ab = ac1
//│   br d (ab)
//│ Basic Block au ():
//│   match tmp7
//│     0 -> az ()
//│     _ -> aw ()
//│ Basic Block ar ():
//│   at1 = call log (6)
//│   as = at1
//│   br d (as)
//│ Basic Block bj ():
//│   match tmp7
//│     3 -> bo ()
//│     _ -> bl ()
//│ Basic Block bg ():
//│   bi1 = call log (6)
//│   bh = bi1
//│   br d (bh)
//│ Basic Block cj ():
//│   match tmp71
//│     0 -> co ()
//│     _ -> cl ()
//│ Basic Block cg ():
//│   ci1 = call log (6)
//│   ch = ci1
//│   br d (ch)
//│ Basic Block df ():
//│   match tmp71
//│     3 -> dk ()
//│     _ -> dh ()
//│ Basic Block cy ():
//│   de1 = call log (6)
//│   cz = de1
//│   br d (cz)
//│ Basic Block az ():
//│   bd1 = call log (2)
//│   bc = bd1
//│   br d (bc)
//│ Basic Block aw ():
//│   ay1 = call log (6)
//│   ax = ay1
//│   br d (ax)
//│ Basic Block bo ():
//│   bq1 = call log (3)
//│   bp = bq1
//│   br d (bp)
//│ Basic Block bl ():
//│   bn1 = call log (6)
//│   bm = bn1
//│   br d (bm)
//│ Basic Block co ():
//│   match tmp8
//│     0 -> ct ()
//│     _ -> cq ()
//│ Basic Block cl ():
//│   cn1 = call log (6)
//│   cm = cn1
//│   br d (cm)
//│ Basic Block dk ():
//│   match tmp8
//│     4 -> dp ()
//│     _ -> dm ()
//│ Basic Block dh ():
//│   dj1 = call log (6)
//│   di = dj1
//│   br d (di)
//│ Basic Block ct ():
//│   cv1 = call log (4)
//│   cu = cv1
//│   br d (cu)
//│ Basic Block cq ():
//│   cs1 = call log (6)
//│   cr = cs1
//│   br d (cr)
//│ Basic Block dp ():
//│   dr1 = call log (5)
//│   dq = dr1
//│   br d (dq)
//│ Basic Block dm ():
//│   do1 = call log (6)
//│   dn = do1
//│   br d (dn)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│   (export "main" (func $main))
//│   (func $main (local $dj1 i32) (local $bw i64) (local $bt i64) (local $bn1 i32) (local $tmp52 i64) (local $ci1 i32) (local $tmp51 i64) (local $s i32) (local $bs i32) (local $ae i32) (local $tmp6 i64) (local $at1 i32) (local $ao1 i32) (local $n i32) (local $cn1 i32) (local $ay1 i32) (local $tmp71 i64) (local $j i64) (local $bd1 i32) (local $cu i32) (local $f i32) (local $cz i32) (local $bc i32) (local $ab i32) (local $as i32) (local $di i32) (local $de1 i32) (local $dn i32) (local $bq1 i32) (local $bi1 i32) (local $g1 i32) (local $cv1 i32) (local $tmp7 i64) (local $ds i32) (local $bm i32) (local $i i32) (local $cr i32) (local $ch i32) (local $w1 i32) (local $ah i32) (local $v i32) (local $dq i32) (local $bu i64) (local $b i32) (local $bz i32) (local $cd1 i32) (local $bp i32) (local $af1 i32) (local $cs1 i32) (local $bh i32) (local $cm i32) (local $o1 i32) (local $tmp62 i64) (local $tmp4 i32) (local $ai i64) (local $do1 i32) (local $ak i64) (local $ax i32) (local $an i32) (local $bv i64) (local $c i32) (local $a1 i32) (local $tmp8 i64) (local $t1 i32) (local $k i64) (local $tmp61 i64) (local $dr1 i32) (local $aj i64) (local $ac1 i32) (local $tmp5 i64) 
//│     block $entry
//│       global.get 0
//│       i32.const 0
//│       i32.add
//│       i32.const 77
//│       i32.store8
//│       global.get 0
//│       i32.const 1
//│       i32.add
//│       i32.const 97
//│       i32.store8
//│       global.get 0
//│       i32.const 2
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 3
//│       i32.add
//│       i32.const 99
//│       i32.store8
//│       global.get 0
//│       i32.const 4
//│       i32.add
//│       i32.const 104
//│       i32.store8
//│       global.get 0
//│       i32.const 5
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 6
//│       i32.add
//│       i32.const 84
//│       i32.store8
//│       global.get 0
//│       i32.const 7
//│       i32.add
//│       i32.const 101
//│       i32.store8
//│       global.get 0
//│       i32.const 8
//│       i32.add
//│       i32.const 115
//│       i32.store8
//│       global.get 0
//│       i32.const 9
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 10
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 11
//│       i32.add
//│       i32.const 56
//│       i32.store8
//│       global.get 0
//│       i32.const 12
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 13
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 14
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 15
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       global.get 0
//│       i32.const 16
//│       i32.add
//│       global.set 0
//│       i32.const 4
//│       call $logI32
//│       i32.const 0
//│       local.set $a1
//│       global.get 0
//│       local.set $b
//│       global.get 0
//│       i32.const 0
//│       i32.store
//│       global.get 0
//│       i32.const 28
//│       i32.add
//│       global.set 0
//│       local.get $b
//│       i32.const 4
//│       i32.add
//│       i64.const 1
//│       i64.store
//│       local.get $b
//│       i32.const 12
//│       i32.add
//│       i64.const 2
//│       i64.store
//│       local.get $b
//│       i32.const 20
//│       i32.add
//│       i64.const 3
//│       i64.store
//│       local.get $b
//│       local.set $tmp4
//│       block $e
//│         block $h
//│           block $ag
//│             block $br
//│               block $Match_tmp4
//│                 local.get $tmp4
//│                 i32.load
//│                 i32.const 2
//│                 i32.eq
//│                 i32.const 1
//│                 i32.mul
//│                 local.get $tmp4
//│                 i32.load
//│                 i32.const 0
//│                 i32.eq
//│                 i32.const 2
//│                 i32.mul
//│                 i32.add
//│                 local.get $tmp4
//│                 i32.load
//│                 i32.const 1
//│                 i32.eq
//│                 i32.const 3
//│                 i32.mul
//│                 i32.add
//│                 br_table 3 2 1 0
//│               end
//│               local.get $tmp4
//│               local.set $bs
//│               local.get $bs
//│               i32.const 4
//│               i32.add
//│               i64.load
//│               local.set $bt
//│               local.get $bt
//│               local.set $tmp52
//│               local.get $bs
//│               i32.const 12
//│               i32.add
//│               i64.load
//│               local.set $bu
//│               local.get $bu
//│               local.set $tmp62
//│               local.get $bs
//│               i32.const 20
//│               i32.add
//│               i64.load
//│               local.set $bv
//│               local.get $bv
//│               local.set $tmp71
//│               local.get $bs
//│               i32.const 28
//│               i32.add
//│               i64.load
//│               local.set $bw
//│               local.get $bw
//│               local.set $tmp8
//│               block $by
//│                 block $ce
//│                   block $cw
//│                     block $Match_tmp52
//│                       local.get $tmp52
//│                       i64.const 0
//│                       i64.eq
//│                       i32.const 1
//│                       i32.mul
//│                       local.get $tmp52
//│                       i64.const 1
//│                       i64.eq
//│                       i32.const 2
//│                       i32.mul
//│                       i32.add
//│                       br_table 2 1 0
//│                     end
//│                     local.get $tmp62
//│                     i64.const 2
//│                     i64.eq
//│                     if
//│                       local.get $tmp71
//│                       i64.const 3
//│                       i64.eq
//│                       if
//│                         local.get $tmp8
//│                         i64.const 4
//│                         i64.eq
//│                         if
//│                           i64.const 5
//│                           call $logI64
//│                           i32.const 0
//│                           local.set $dr1
//│                           local.get $dr1
//│                           local.set $dq
//│                           local.get $dq
//│                           local.set $c
//│                         else
//│                           i64.const 6
//│                           call $logI64
//│                           i32.const 0
//│                           local.set $do1
//│                           local.get $do1
//│                           local.set $dn
//│                           local.get $dn
//│                           local.set $c
//│                         end
//│                       else
//│                         i64.const 6
//│                         call $logI64
//│                         i32.const 0
//│                         local.set $dj1
//│                         local.get $dj1
//│                         local.set $di
//│                         local.get $di
//│                         local.set $c
//│                       end
//│                     else
//│                       i64.const 6
//│                       call $logI64
//│                       i32.const 0
//│                       local.set $de1
//│                       local.get $de1
//│                       local.set $cz
//│                       local.get $cz
//│                       local.set $c
//│                     end
//│                     br $by
//│                   end
//│                   local.get $tmp62
//│                   i64.const 0
//│                   i64.eq
//│                   if
//│                     local.get $tmp71
//│                     i64.const 0
//│                     i64.eq
//│                     if
//│                       local.get $tmp8
//│                       i64.const 0
//│                       i64.eq
//│                       if
//│                         i64.const 4
//│                         call $logI64
//│                         i32.const 0
//│                         local.set $cv1
//│                         local.get $cv1
//│                         local.set $cu
//│                         local.get $cu
//│                         local.set $c
//│                       else
//│                         i64.const 6
//│                         call $logI64
//│                         i32.const 0
//│                         local.set $cs1
//│                         local.get $cs1
//│                         local.set $cr
//│                         local.get $cr
//│                         local.set $c
//│                       end
//│                     else
//│                       i64.const 6
//│                       call $logI64
//│                       i32.const 0
//│                       local.set $cn1
//│                       local.get $cn1
//│                       local.set $cm
//│                       local.get $cm
//│                       local.set $c
//│                     end
//│                   else
//│                     i64.const 6
//│                     call $logI64
//│                     i32.const 0
//│                     local.set $ci1
//│                     local.get $ci1
//│                     local.set $ch
//│                     local.get $ch
//│                     local.set $c
//│                   end
//│                   br $by
//│                 end
//│                 i64.const 6
//│                 call $logI64
//│                 i32.const 0
//│                 local.set $cd1
//│                 local.get $cd1
//│                 local.set $bz
//│                 local.get $bz
//│                 local.set $c
//│               end
//│               br $e
//│             end
//│             local.get $tmp4
//│             local.set $ah
//│             local.get $ah
//│             i32.const 4
//│             i32.add
//│             i64.load
//│             local.set $ai
//│             local.get $ai
//│             local.set $tmp51
//│             local.get $ah
//│             i32.const 12
//│             i32.add
//│             i64.load
//│             local.set $aj
//│             local.get $aj
//│             local.set $tmp61
//│             local.get $ah
//│             i32.const 20
//│             i32.add
//│             i64.load
//│             local.set $ak
//│             local.get $ak
//│             local.set $tmp7
//│             block $am
//│               block $ap
//│                 block $be
//│                   block $Match_tmp51
//│                     local.get $tmp51
//│                     i64.const 0
//│                     i64.eq
//│                     i32.const 1
//│                     i32.mul
//│                     local.get $tmp51
//│                     i64.const 1
//│                     i64.eq
//│                     i32.const 2
//│                     i32.mul
//│                     i32.add
//│                     br_table 2 1 0
//│                   end
//│                   local.get $tmp61
//│                   i64.const 2
//│                   i64.eq
//│                   if
//│                     local.get $tmp7
//│                     i64.const 3
//│                     i64.eq
//│                     if
//│                       i64.const 3
//│                       call $logI64
//│                       i32.const 0
//│                       local.set $bq1
//│                       local.get $bq1
//│                       local.set $bp
//│                       local.get $bp
//│                       local.set $c
//│                     else
//│                       i64.const 6
//│                       call $logI64
//│                       i32.const 0
//│                       local.set $bn1
//│                       local.get $bn1
//│                       local.set $bm
//│                       local.get $bm
//│                       local.set $c
//│                     end
//│                   else
//│                     i64.const 6
//│                     call $logI64
//│                     i32.const 0
//│                     local.set $bi1
//│                     local.get $bi1
//│                     local.set $bh
//│                     local.get $bh
//│                     local.set $c
//│                   end
//│                   br $am
//│                 end
//│                 local.get $tmp61
//│                 i64.const 0
//│                 i64.eq
//│                 if
//│                   local.get $tmp7
//│                   i64.const 0
//│                   i64.eq
//│                   if
//│                     i64.const 2
//│                     call $logI64
//│                     i32.const 0
//│                     local.set $bd1
//│                     local.get $bd1
//│                     local.set $bc
//│                     local.get $bc
//│                     local.set $c
//│                   else
//│                     i64.const 6
//│                     call $logI64
//│                     i32.const 0
//│                     local.set $ay1
//│                     local.get $ay1
//│                     local.set $ax
//│                     local.get $ax
//│                     local.set $c
//│                   end
//│                 else
//│                   i64.const 6
//│                   call $logI64
//│                   i32.const 0
//│                   local.set $at1
//│                   local.get $at1
//│                   local.set $as
//│                   local.get $as
//│                   local.set $c
//│                 end
//│                 br $am
//│               end
//│               i64.const 6
//│               call $logI64
//│               i32.const 0
//│               local.set $ao1
//│               local.get $ao1
//│               local.set $an
//│               local.get $an
//│               local.set $c
//│             end
//│             br $e
//│           end
//│           local.get $tmp4
//│           local.set $i
//│           local.get $i
//│           i32.const 4
//│           i32.add
//│           i64.load
//│           local.set $j
//│           local.get $j
//│           local.set $tmp5
//│           local.get $i
//│           i32.const 12
//│           i32.add
//│           i64.load
//│           local.set $k
//│           local.get $k
//│           local.set $tmp6
//│           block $m
//│             block $p
//│               block $x
//│                 block $Match_tmp5
//│                   local.get $tmp5
//│                   i64.const 0
//│                   i64.eq
//│                   i32.const 1
//│                   i32.mul
//│                   local.get $tmp5
//│                   i64.const 1
//│                   i64.eq
//│                   i32.const 2
//│                   i32.mul
//│                   i32.add
//│                   br_table 2 1 0
//│                 end
//│                 local.get $tmp6
//│                 i64.const 2
//│                 i64.eq
//│                 if
//│                   i64.const 1
//│                   call $logI64
//│                   i32.const 0
//│                   local.set $af1
//│                   local.get $af1
//│                   local.set $ae
//│                   local.get $ae
//│                   local.set $c
//│                 else
//│                   i64.const 6
//│                   call $logI64
//│                   i32.const 0
//│                   local.set $ac1
//│                   local.get $ac1
//│                   local.set $ab
//│                   local.get $ab
//│                   local.set $c
//│                 end
//│                 br $m
//│               end
//│               local.get $tmp6
//│               i64.const 0
//│               i64.eq
//│               if
//│                 i64.const 0
//│                 call $logI64
//│                 i32.const 0
//│                 local.set $w1
//│                 local.get $w1
//│                 local.set $v
//│                 local.get $v
//│                 local.set $c
//│               else
//│                 i64.const 6
//│                 call $logI64
//│                 i32.const 0
//│                 local.set $t1
//│                 local.get $t1
//│                 local.set $s
//│                 local.get $s
//│                 local.set $c
//│               end
//│               br $m
//│             end
//│             i64.const 6
//│             call $logI64
//│             i32.const 0
//│             local.set $o1
//│             local.get $o1
//│             local.set $n
//│             local.get $n
//│             local.set $c
//│           end
//│           br $e
//│         end
//│         i64.const 6
//│         call $logI64
//│         i32.const 0
//│         local.set $g1
//│         local.get $g1
//│         local.set $f
//│         local.get $f
//│         local.set $c
//│       end
//│     end
//│     local.get $c
//│     local.set $ds
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Match Test 8
//│ result
//│        = undefined
//│ // Output
//│ 3

// FIXME type inference is required
log of "Match Test 8"
class A(x: Int)
class B()
class C()
let x = A(1)
let res = if x is
  A(x) and x is
    0 then log(0)
    1 then log(1)
    //1
  B() then log(20)
  C() then log(30)
  else log(40)
log(res)
//│ class A(x: Int)
//│ class B()
//│ class C()
//│ let x: A
//│ let res: undefined
//│ undefined
//│ entry IR:
//│ Basic Block entry ():
//│   a1 = call log (Match Test 8)
//│   b = alloc A
//│   setfield b.x = 1
//│   c = b
//│   match c
//│     A -> i ()
//│     B -> v ()
//│     C -> ab ()
//│     _ -> f ()
//│ Basic Block i ():
//│   j = cast c, A
//│   tmp9 = j
//│   k = getfield tmp9, x
//│   x1 = k
//│   match x1
//│     0 -> p ()
//│     1 -> s ()
//│     _ -> m ()
//│ Basic Block v ():
//│   w = cast c, B
//│   z1 = call log (20)
//│   y = z1
//│   br e (y)
//│ Basic Block ab ():
//│   ac = cast c, C
//│   ae1 = call log (30)
//│   ad = ae1
//│   br e (ad)
//│ Basic Block f ():
//│   h1 = call log (40)
//│   g = h1
//│   br e (g)
//│ Basic Block p ():
//│   r1 = call log (0)
//│   q = r1
//│   br e (q)
//│ Basic Block s ():
//│   u1 = call log (1)
//│   t = u1
//│   br e (t)
//│ Basic Block m ():
//│   o1 = call log (40)
//│   n = o1
//│   br e (n)
//│ Basic Block e (d):
//│   af = d
//│   ag1 = call log (af)
//│ 
//│ 
//│ WASM:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $logI32 (import "system" "logI32") (param i32 i32))
//│   (func $logI64 (import "system" "logI64") (param i64))
//│   (func $logF64 (import "system" "logF64") (param f64))
//│   (global (mut i32) i32.const 0) 
//│   (export "main" (func $main))
//│   (func $main (local $ae1 i32) (local $z1 i32) (local $af i32) (local $o1 i32) (local $ad i32) (local $w i32) (local $tmp9 i32) (local $k i64) (local $d i32) (local $ag1 i32) (local $n i32) (local $j i32) (local $y i32) (local $u1 i32) (local $t i32) (local $q i32) (local $ac i32) (local $b i32) (local $g i32) (local $r1 i32) (local $h1 i32) (local $x1 i64) (local $c i32) (local $a1 i32) 
//│     block $entry
//│       global.get 0
//│       i32.const 0
//│       i32.add
//│       i32.const 77
//│       i32.store8
//│       global.get 0
//│       i32.const 1
//│       i32.add
//│       i32.const 97
//│       i32.store8
//│       global.get 0
//│       i32.const 2
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 3
//│       i32.add
//│       i32.const 99
//│       i32.store8
//│       global.get 0
//│       i32.const 4
//│       i32.add
//│       i32.const 104
//│       i32.store8
//│       global.get 0
//│       i32.const 5
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 6
//│       i32.add
//│       i32.const 84
//│       i32.store8
//│       global.get 0
//│       i32.const 7
//│       i32.add
//│       i32.const 101
//│       i32.store8
//│       global.get 0
//│       i32.const 8
//│       i32.add
//│       i32.const 115
//│       i32.store8
//│       global.get 0
//│       i32.const 9
//│       i32.add
//│       i32.const 116
//│       i32.store8
//│       global.get 0
//│       i32.const 10
//│       i32.add
//│       i32.const 32
//│       i32.store8
//│       global.get 0
//│       i32.const 11
//│       i32.add
//│       i32.const 56
//│       i32.store8
//│       global.get 0
//│       i32.const 12
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 13
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 14
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       i32.const 15
//│       i32.add
//│       i32.const 0
//│       i32.store8
//│       global.get 0
//│       global.get 0
//│       i32.const 16
//│       i32.add
//│       global.set 0
//│       i32.const 4
//│       call $logI32
//│       i32.const 0
//│       local.set $a1
//│       global.get 0
//│       local.set $b
//│       global.get 0
//│       i32.const 0
//│       i32.store
//│       global.get 0
//│       i32.const 12
//│       i32.add
//│       global.set 0
//│       local.get $b
//│       i32.const 4
//│       i32.add
//│       i64.const 1
//│       i64.store
//│       local.get $b
//│       local.set $c
//│       block $f
//│         block $i
//│           block $v
//│             block $ab
//│               block $Match_c
//│                 local.get $c
//│                 i32.load
//│                 i32.const 0
//│                 i32.eq
//│                 i32.const 1
//│                 i32.mul
//│                 local.get $c
//│                 i32.load
//│                 i32.const 1
//│                 i32.eq
//│                 i32.const 2
//│                 i32.mul
//│                 i32.add
//│                 local.get $c
//│                 i32.load
//│                 i32.const 2
//│                 i32.eq
//│                 i32.const 3
//│                 i32.mul
//│                 i32.add
//│                 br_table 3 2 1 0
//│               end
//│               local.get $c
//│               local.set $ac
//│               i64.const 30
//│               call $logI64
//│               i32.const 0
//│               local.set $ae1
//│               local.get $ae1
//│               local.set $ad
//│               local.get $ad
//│               local.set $d
//│               br $f
//│             end
//│             local.get $c
//│             local.set $w
//│             i64.const 20
//│             call $logI64
//│             i32.const 0
//│             local.set $z1
//│             local.get $z1
//│             local.set $y
//│             local.get $y
//│             local.set $d
//│             br $f
//│           end
//│           local.get $c
//│           local.set $j
//│           local.get $j
//│           local.set $tmp9
//│           local.get $tmp9
//│           i32.const 4
//│           i32.add
//│           i64.load
//│           local.set $k
//│           local.get $k
//│           local.set $x1
//│           block $m
//│             block $p
//│               block $s
//│                 block $Match_x1
//│                   local.get $x1
//│                   i64.const 0
//│                   i64.eq
//│                   i32.const 1
//│                   i32.mul
//│                   local.get $x1
//│                   i64.const 1
//│                   i64.eq
//│                   i32.const 2
//│                   i32.mul
//│                   i32.add
//│                   br_table 2 1 0
//│                 end
//│                 i64.const 1
//│                 call $logI64
//│                 i32.const 0
//│                 local.set $u1
//│                 local.get $u1
//│                 local.set $t
//│                 local.get $t
//│                 local.set $d
//│                 br $m
//│               end
//│               i64.const 0
//│               call $logI64
//│               i32.const 0
//│               local.set $r1
//│               local.get $r1
//│               local.set $q
//│               local.get $q
//│               local.set $d
//│               br $m
//│             end
//│             i64.const 40
//│             call $logI64
//│             i32.const 0
//│             local.set $o1
//│             local.get $o1
//│             local.set $n
//│             local.get $n
//│             local.set $d
//│           end
//│           br $f
//│         end
//│         i64.const 40
//│         call $logI64
//│         i32.const 0
//│         local.set $h1
//│         local.get $h1
//│         local.set $g
//│         local.get $g
//│         local.set $d
//│       end
//│     end
//│     local.get $d
//│     local.set $af
//│     local.get $af
//│     i32.const 0
//│     call $logI32
//│     i32.const 0
//│     local.set $ag1
//│   )
//│ )
//│ 
//│ res
//│     = undefined
//│ // Output
//│ Match Test 8
//│ x
//│   = A {}
//│ res
//│     = undefined
//│ // Output
//│ 1
//│ res
//│     = undefined
//│ // Output
//│ undefined
