:NewParser
:ParseOnly


class Pair(x, y)
fun mktup2(x, y) = mktup(x, y)
fun mktup(x, y) = Pair(x, y)
fun foo() =
  mktup2(1, 2)
foo()
//│ |#class| |Pair|(|x|,| |y|)|↵|#fun| |mktup2|(|x|,| |y|)| |#=| |mktup|(|x|,| |y|)|↵|#fun| |mktup|(|x|,| |y|)| |#=| |Pair|(|x|,| |y|)|↵|#fun| |foo|(||)| |#=|→|mktup2|(|1|,| |2|)|←|↵|foo|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun mktup2 = (x, y,) => mktup(x, y,); fun mktup = (x, y,) => Pair(x, y,); fun foo = () => {mktup2(1, 2,)}; foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, mktup2, None, [], Lam(Tup(_: Var(x), _: Var(y)), App(Var(mktup), Tup(_: Var(x), _: Var(y))))), NuFunDef(None, mktup, None, [], Lam(Tup(_: Var(x), _: Var(y)), App(Var(Pair), Tup(_: Var(x), _: Var(y))))), NuFunDef(None, foo, None, [], Lam(Tup(), Blk(...))), App(Var(foo), Tup()))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, mktup2, [x,y], [{}], 
//│ None, 1, 
//│ let* (x0) = mktup(x,y)
//│   in x0
//│ )
//│ Def(1, mktup, [x,y], [{}], 
//│ None, 1, 
//│ let x1 = Pair(x,y)
//│   in x1
//│ )
//│ Def(2, foo, [], [{}], 
//│ None, 1, 
//│ let* (x2) = mktup2(1,2)
//│   in x2
//│ )
//│ },
//│ let* (x3) = foo()
//│   in x3)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, mktup2, [x,y], [{EDirect},{EDirect}], 
//│ Some(ICtor(Pair)), 1, 
//│ let* (x0) = mktup(x,y)
//│   in x0
//│ )
//│ Def(1, mktup, [x,y], [{EDirect},{EDirect}], 
//│ Some(ICtor(Pair)), 1, 
//│ let x1 = Pair(x,y)
//│   in x1
//│ )
//│ Def(2, foo, [], [], 
//│ Some(ICtor(Pair)), 1, 
//│ let* (x2) = mktup2(1,2)
//│   in x2
//│ )
//│ },
//│ let* (x3) = foo()
//│   in x3)

class Pair(x, y)
fun foo(pair) =
  if pair is
    Pair(x, y) then Pair(x, y)
fun bar() =
  foo(Pair(1, 2))
bar()
//│ |#class| |Pair|(|x|,| |y|)|↵|#fun| |foo|(|pair|)| |#=|→|#if| |pair| |is|→|Pair|(|x|,| |y|)| |#then| |Pair|(|x|,| |y|)|←|←|↵|#fun| |bar|(||)| |#=|→|foo|(|Pair|(|1|,| |2|)|)|←|↵|bar|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun foo = (pair,) => {if pair is ‹(Pair(x, y,)) then Pair(x, y,)›}; fun bar = () => {foo(Pair(1, 2,),)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(pair)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, foo, [pair], [{}], 
//│ None, 1, 
//│ let join j0(x4) = x4
//│   in case pair of
//│     Pair => let x1 = pair.y
//│       in let x2 = pair.x
//│         in let x3 = Pair(x2,x1)
//│           in jump j0(x3)
//│ )
//│ Def(1, bar, [], [{}], 
//│ None, 1, 
//│ let x5 = Pair(1,2)
//│   in let* (x6) = foo(x5)
//│     in x6
//│ )
//│ },
//│ let* (x7) = bar()
//│   in x7)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, foo, [pair], [{EDestruct，EDirect，ESelect(y)，ESelect(x)}], 
//│ Some(ICtor(Pair)), 1, 
//│ case pair of
//│   Pair => let x1 = pair.y
//│     in let x2 = pair.x
//│       in let x3 = Pair(x2,x1)
//│         in jump j0(x3)
//│ )
//│ Def(1, bar, [], [], 
//│ Some(ICtor(Pair)), 1, 
//│ let x5 = Pair(1,2)
//│   in let* (x6) = foo(x5)
//│     in x6
//│ )
//│ Def(2, @join j0, [x4], [{EDirect}], 
//│ None, 1, 
//│ x4
//│ )
//│ },
//│ let* (x7) = bar()
//│   in x7)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(5, foo$D9$S11, [pair_y,pair_x], [{}], 
//│ None, 1, 
//│ let x3 = Pair(pair_x,pair_y)
//│   in jump j0(x3)
//│ )
//│ Def(1, bar, [], [{}], 
//│ None, 1, 
//│ let* (x6) = foo$D9$S11(2,1)
//│   in x6
//│ )
//│ Def(2, @join j0, [x4], [{}], 
//│ None, 1, 
//│ x4
//│ )
//│ },
//│ let* (x7) = bar()
//│   in x7)



fun add3(x) = y => z => x + y + z
fun foo(f) = f(2)
foo(add3(1))
//│ |#fun| |add3|(|x|)| |#=| |y| |#=>| |z| |#=>| |x| |+| |y| |+| |z|↵|#fun| |foo|(|f|)| |#=| |f|(|2|)|↵|foo|(|add3|(|1|)|)|
//│ Parsed: {fun add3 = (x,) => (y,) => (z,) => +(+(x,)(y,),)(z,); fun foo = (f,) => f(2,); foo(add3(1,),)}
//│ Parsed:
//│ TypingUnit(NuFunDef(None, add3, None, [], Lam(Tup(_: Var(x)), Lam(Tup(_: Var(y)), Lam(Tup(_: Var(z)), App(App(Var(+), Tup(_: App(App(Var(+), Tup(_: Var(x))), Tup(_: Var(y))))), Tup(_: Var(z))))))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(f)), App(Var(f), Tup(_: IntLit(2))))), App(Var(foo), Tup(_: App(Var(add3), Tup(_: IntLit(1))))))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({}, {
//│ Def(0, add3, [x], [{}], 
//│ None, 1, 
//│ let x0 = y => let x1 = z => let x2 = +(x,y)
//│   in let x3 = +(x2,z)
//│     in x3
//│   in x1
//│   in x0
//│ )
//│ Def(1, foo, [f], [{}], 
//│ None, 1, 
//│ let x4 = f(2)
//│   in x4
//│ )
//│ },
//│ let* (x5) = add3(1)
//│   in let* (x6) = foo(x5)
//│     in x6)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({}, {
//│ Def(0, add3, [x], [{EDirect}], 
//│ Some(ILam(1)), 1, 
//│ let x0 = y => let x1 = z => let x2 = +(x,y)
//│   in let x3 = +(x2,z)
//│     in x3
//│   in x1
//│   in x0
//│ )
//│ Def(1, foo, [f], [{EApp(1)}], 
//│ None, 1, 
//│ let x4 = f(2)
//│   in x4
//│ )
//│ },
//│ let* (x5) = add3(1)
//│   in let* (x6) = foo(x5)
//│     in x6)

class Pair(x, y) {}
fun silly(pair) =
  let _ = 0
  let n = if pair is
    Pair(x1, x2) then
      if pair is
        Pair (x3, x4) then x3 + 1
  n + 1
fun foo() =
    let a = Pair(0, 1)
    let b = silly(a)
    b
foo()
//│ |#class| |Pair|(|x|,| |y|)| |{||}|↵|#fun| |silly|(|pair|)| |#=|→|#let| |_| |#=| |0|↵|#let| |n| |#=| |#if| |pair| |is|→|Pair|(|x1|,| |x2|)| |#then|→|#if| |pair| |is|→|Pair| |(|x3|,| |x4|)| |#then| |x3| |+| |1|←|←|←|↵|n| |+| |1|←|↵|#fun| |foo|(||)| |#=|→|#let| |a| |#=| |Pair|(|0|,| |1|)|↵|#let| |b| |#=| |silly|(|a|)|↵|b|←|↵|foo|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun silly = (pair,) => {let _ = 0; let n = if pair is ‹(Pair(x1, x2,)) then {if pair is ‹(Pair(x3, x4,)) then +(x3,)(1,)›}›; +(n,)(1,)}; fun foo = () => {let a = Pair(0, 1,); let b = silly(a,); b}; foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, silly, None, [], Lam(Tup(_: Var(pair)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(), Blk(...))), App(Var(foo), Tup()))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, silly, [pair], [{}], 
//│ None, 1, 
//│ let x0 = 0
//│   in let join j1(x9) = let x10 = +(x9,1)
//│         in x10
//│     in case pair of
//│       Pair => let x2 = pair.y
//│         in let x3 = pair.x
//│           in let join j4(x8) = jump j1(x8)
//│             in case pair of
//│               Pair => let x5 = pair.y
//│                 in let x6 = pair.x
//│                   in let x7 = +(x6,1)
//│                     in jump j4(x7)
//│ )
//│ Def(1, foo, [], [{}], 
//│ None, 1, 
//│ let x11 = Pair(0,1)
//│   in let* (x12) = silly(x11)
//│     in x12
//│ )
//│ },
//│ let* (x13) = foo()
//│   in x13)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, silly, [pair], [{EDestruct，EDirect，ESelect(x)}], 
//│ None, 1, 
//│ case pair of
//│   Pair => case pair of
//│     Pair => let x6 = pair.x
//│       in let x7 = +(x6,1)
//│         in jump j4(x7)
//│ )
//│ Def(1, foo, [], [], 
//│ None, 1, 
//│ let x11 = Pair(0,1)
//│   in let* (x12) = silly(x11)
//│     in x12
//│ )
//│ Def(3, @join j4, [x8], [{EDirect}], 
//│ None, 1, 
//│ jump j1(x8)
//│ )
//│ Def(2, @join j1, [x9], [{EDirect}], 
//│ None, 1, 
//│ let x10 = +(x9,1)
//│   in x10
//│ )
//│ },
//│ let* (x13) = foo()
//│   in x13)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(5, silly$D15, [pair], [{}], 
//│ None, 1, 
//│ case pair of
//│   Pair => let x6 = pair.x
//│     in let x7 = +(x6,1)
//│       in jump j4(x7)
//│ )
//│ Def(1, foo, [], [{}], 
//│ None, 1, 
//│ let x11 = Pair(0,1)
//│   in let* (x12) = silly$D15(x11)
//│     in x12
//│ )
//│ Def(2, @join j1, [x9], [{}], 
//│ None, 1, 
//│ let x10 = +(x9,1)
//│   in x10
//│ )
//│ Def(3, @join j4, [x8], [{}], 
//│ None, 1, 
//│ jump j1(x8)
//│ )
//│ },
//│ let* (x13) = foo()
//│   in x13)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(1, foo, [], [{}], 
//│ None, 1, 
//│ let* (x12) = silly$D15$D18$S20(0)
//│   in x12
//│ )
//│ Def(2, @join j1, [x9], [{}], 
//│ None, 1, 
//│ let x10 = +(x9,1)
//│   in x10
//│ )
//│ Def(3, @join j4, [x8], [{}], 
//│ None, 1, 
//│ jump j1(x8)
//│ )
//│ Def(8, silly$D15$D18$S20, [pair_x], [{}], 
//│ None, 1, 
//│ let x7 = +(pair_x,1)
//│   in jump j4(x7)
//│ )
//│ },
//│ let* (x13) = foo()
//│   in x13)


class Pair(x, y) {}
fun inc_fst(pair) =
  let c = 2
  if pair is
    Pair(x1, x2) then x1 + c
fun foo() =
    let a = Pair(0, 1)
    let b = inc_fst(a)
    b
foo()
//│ |#class| |Pair|(|x|,| |y|)| |{||}|↵|#fun| |inc_fst|(|pair|)| |#=|→|#let| |c| |#=| |2|↵|#if| |pair| |is|→|Pair|(|x1|,| |x2|)| |#then| |x1| |+| |c|←|←|↵|#fun| |foo|(||)| |#=|→|#let| |a| |#=| |Pair|(|0|,| |1|)|↵|#let| |b| |#=| |inc_fst|(|a|)|↵|b|←|↵|foo|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun inc_fst = (pair,) => {let c = 2; if pair is ‹(Pair(x1, x2,)) then +(x1,)(c,)›}; fun foo = () => {let a = Pair(0, 1,); let b = inc_fst(a,); b}; foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, inc_fst, None, [], Lam(Tup(_: Var(pair)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(), Blk(...))), App(Var(foo), Tup()))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, inc_fst, [pair], [{}], 
//│ None, 1, 
//│ let x0 = 2
//│   in let join j1(x5) = x5
//│     in case pair of
//│       Pair => let x2 = pair.y
//│         in let x3 = pair.x
//│           in let x4 = +(x3,x0)
//│             in jump j1(x4)
//│ )
//│ Def(1, foo, [], [{}], 
//│ None, 1, 
//│ let x6 = Pair(0,1)
//│   in let* (x7) = inc_fst(x6)
//│     in x7
//│ )
//│ },
//│ let* (x8) = foo()
//│   in x8)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, inc_fst, [pair], [{EDestruct，EDirect，ESelect(x)}], 
//│ None, 1, 
//│ case pair of
//│   Pair => let x3 = pair.x
//│     in let x4 = +(x3,2)
//│       in jump j1(x4)
//│ )
//│ Def(1, foo, [], [], 
//│ None, 1, 
//│ let x6 = Pair(0,1)
//│   in let* (x7) = inc_fst(x6)
//│     in x7
//│ )
//│ Def(2, @join j1, [x5], [{EDirect}], 
//│ None, 1, 
//│ x5
//│ )
//│ },
//│ let* (x8) = foo()
//│   in x8)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(5, inc_fst$D10$S12, [pair_x], [{}], 
//│ None, 1, 
//│ let x4 = +(pair_x,2)
//│   in jump j1(x4)
//│ )
//│ Def(1, foo, [], [{}], 
//│ None, 1, 
//│ let* (x7) = inc_fst$D10$S12(0)
//│   in x7
//│ )
//│ Def(2, @join j1, [x5], [{}], 
//│ None, 1, 
//│ x5
//│ )
//│ },
//│ let* (x8) = foo()
//│   in x8)

class Pair(x, y)
fun inc_fst(pair) =
  let _ = 0
  if pair is
    Pair(x1, x2) then x2 + 1
fun foo() =
    let b = inc_fst(Pair(0, 1))
    b
foo()
//│ |#class| |Pair|(|x|,| |y|)|↵|#fun| |inc_fst|(|pair|)| |#=|→|#let| |_| |#=| |0|↵|#if| |pair| |is|→|Pair|(|x1|,| |x2|)| |#then| |x2| |+| |1|←|←|↵|#fun| |foo|(||)| |#=|→|#let| |b| |#=| |inc_fst|(|Pair|(|0|,| |1|)|)|↵|b|←|↵|foo|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun inc_fst = (pair,) => {let _ = 0; if pair is ‹(Pair(x1, x2,)) then +(x2,)(1,)›}; fun foo = () => {let b = inc_fst(Pair(0, 1,),); b}; foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, inc_fst, None, [], Lam(Tup(_: Var(pair)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(), Blk(...))), App(Var(foo), Tup()))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, inc_fst, [pair], [{}], 
//│ None, 1, 
//│ let x0 = 0
//│   in let join j1(x5) = x5
//│     in case pair of
//│       Pair => let x2 = pair.y
//│         in let x3 = pair.x
//│           in let x4 = +(x2,1)
//│             in jump j1(x4)
//│ )
//│ Def(1, foo, [], [{}], 
//│ None, 1, 
//│ let x6 = Pair(0,1)
//│   in let* (x7) = inc_fst(x6)
//│     in x7
//│ )
//│ },
//│ let* (x8) = foo()
//│   in x8)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, inc_fst, [pair], [{EDestruct，EDirect，ESelect(y)}], 
//│ None, 1, 
//│ case pair of
//│   Pair => let x2 = pair.y
//│     in let x4 = +(x2,1)
//│       in jump j1(x4)
//│ )
//│ Def(1, foo, [], [], 
//│ None, 1, 
//│ let x6 = Pair(0,1)
//│   in let* (x7) = inc_fst(x6)
//│     in x7
//│ )
//│ Def(2, @join j1, [x5], [{EDirect}], 
//│ None, 1, 
//│ x5
//│ )
//│ },
//│ let* (x8) = foo()
//│   in x8)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(5, inc_fst$D10$S12, [pair_y], [{}], 
//│ None, 1, 
//│ let x4 = +(pair_y,1)
//│   in jump j1(x4)
//│ )
//│ Def(1, foo, [], [{}], 
//│ None, 1, 
//│ let* (x7) = inc_fst$D10$S12(1)
//│   in x7
//│ )
//│ Def(2, @join j1, [x5], [{}], 
//│ None, 1, 
//│ x5
//│ )
//│ },
//│ let* (x8) = foo()
//│   in x8)

class Left(x)
class Right(y)
fun foo(a, b) =
  let t = if a is
    Left(x) then Left(x + 1)
    Right(y) then Right(b)
  if t is
    Left(x) then x
    Right(y) then y
fun bar() =
  foo(Right(2), 2)
bar()
//│ |#class| |Left|(|x|)|↵|#class| |Right|(|y|)|↵|#fun| |foo|(|a|,| |b|)| |#=|→|#let| |t| |#=| |#if| |a| |is|→|Left|(|x|)| |#then| |Left|(|x| |+| |1|)|↵|Right|(|y|)| |#then| |Right|(|b|)|←|↵|#if| |t| |is|→|Left|(|x|)| |#then| |x|↵|Right|(|y|)| |#then| |y|←|←|↵|#fun| |bar|(||)| |#=|→|foo|(|Right|(|2|)|,| |2|)|←|↵|bar|(||)|
//│ Parsed: {class Left(x,) {}; class Right(y,) {}; fun foo = (a, b,) => {let t = if a is ‹(Left(x,)) then Left(+(x,)(1,),); (Right(y,)) then Right(b,)›; if t is ‹(Left(x,)) then x; (Right(y,)) then y›}; fun bar = () => {foo(Right(2,), 2,)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Left, (), Tup(_: Var(x)), (), None, None, TypingUnit()), NuTypeDef(class, Right, (), Tup(_: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(a), _: Var(b)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Left, [x]),ClassInfo(1, Right, [y])}, {
//│ Def(0, foo, [a,b], [{}], 
//│ None, 1, 
//│ let join j0(x6) = let join j7(x10) = x10
//│       in case x6 of
//│         Left => let x8 = x6.x
//│           in jump j7(x8)
//│         Right => let x9 = x6.y
//│           in jump j7(x9)
//│   in case a of
//│     Left => let x1 = a.x
//│       in let x2 = +(x1,1)
//│         in let x3 = Left(x2)
//│           in jump j0(x3)
//│     Right => let x4 = a.y
//│       in let x5 = Right(b)
//│         in jump j0(x5)
//│ )
//│ Def(1, bar, [], [{}], 
//│ None, 1, 
//│ let x11 = Right(2)
//│   in let* (x12) = foo(x11,2)
//│     in x12
//│ )
//│ },
//│ let* (x13) = bar()
//│   in x13)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Left, [x]),ClassInfo(1, Right, [y])}, {
//│ Def(0, foo, [a,b], [{EDestruct，EDirect，ESelect(x)},{EDirect}], 
//│ None, 1, 
//│ case a of
//│   Left => let x1 = a.x
//│     in let x2 = +(x1,1)
//│       in let x3 = Left(x2)
//│         in jump j0(x3)
//│   Right => let x5 = Right(b)
//│     in jump j0(x5)
//│ )
//│ Def(1, bar, [], [], 
//│ None, 1, 
//│ let x11 = Right(2)
//│   in let* (x12) = foo(x11,2)
//│     in x12
//│ )
//│ Def(2, @join j0, [x6], [{EDestruct，EDirect，ESelect(x)，ESelect(y)}], 
//│ None, 1, 
//│ case x6 of
//│   Left => let x8 = x6.x
//│     in jump j7(x8)
//│   Right => let x9 = x6.y
//│     in jump j7(x9)
//│ )
//│ Def(3, @join j7, [x10], [{EDirect}], 
//│ None, 1, 
//│ x10
//│ )
//│ },
//│ let* (x13) = bar()
//│   in x13)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Left, [x]),ClassInfo(1, Right, [y])}, {
//│ Def(1, bar, [], [{}], 
//│ None, 1, 
//│ let* (x12) = foo$D16(2)
//│   in x12
//│ )
//│ Def(6, foo$D16, [b], [{}], 
//│ None, 1, 
//│ let x5 = Right(b)
//│   in jump j0(x5)
//│ )
//│ Def(2, @join j0, [x6], [{}], 
//│ None, 1, 
//│ case x6 of
//│   Left => let x8 = x6.x
//│     in jump j7(x8)
//│   Right => let x9 = x6.y
//│     in jump j7(x9)
//│ )
//│ Def(3, @join j7, [x10], [{}], 
//│ None, 1, 
//│ x10
//│ )
//│ },
//│ let* (x13) = bar()
//│   in x13)

class True
class False
class Pair(x, y)
fun foo(a) = a.x + a.y
fun bar() =
  foo(Pair(1, 0))
bar()
//│ |#class| |True|↵|#class| |False|↵|#class| |Pair|(|x|,| |y|)|↵|#fun| |foo|(|a|)| |#=| |a|.x| |+| |a|.y|↵|#fun| |bar|(||)| |#=|→|foo|(|Pair|(|1|,| |0|)|)|←|↵|bar|(||)|
//│ Parsed: {class True {}; class False {}; class Pair(x, y,) {}; fun foo = (a,) => +((a).x,)((a).y,); fun bar = () => {foo(Pair(1, 0,),)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(a)), App(App(Var(+), Tup(_: Sel(Var(a), x))), Tup(_: Sel(Var(a), y))))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Pair, [x,y])}, {
//│ Def(0, foo, [a], [{}], 
//│ None, 1, 
//│ let x0 = a.x
//│   in let x1 = a.y
//│     in let x2 = +(x0,x1)
//│       in x2
//│ )
//│ Def(1, bar, [], [{}], 
//│ None, 1, 
//│ let x3 = Pair(1,0)
//│   in let* (x4) = foo(x3)
//│     in x4
//│ )
//│ },
//│ let* (x5) = bar()
//│   in x5)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Pair, [x,y])}, {
//│ Def(0, foo, [a], [{ESelect(x)，ESelect(y)}], 
//│ None, 1, 
//│ let x0 = a.x
//│   in let x1 = a.y
//│     in let x2 = +(x0,x1)
//│       in x2
//│ )
//│ Def(1, bar, [], [], 
//│ None, 1, 
//│ let x3 = Pair(1,0)
//│   in let* (x4) = foo(x3)
//│     in x4
//│ )
//│ },
//│ let* (x5) = bar()
//│   in x5)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Pair, [x,y])}, {
//│ Def(1, bar, [], [{}], 
//│ None, 1, 
//│ let* (x4) = foo$S6(1,0)
//│   in x4
//│ )
//│ Def(2, foo$S6, [a_x,a_y], [{}], 
//│ None, 1, 
//│ let x2 = +(a_x,a_y)
//│   in x2
//│ )
//│ },
//│ let* (x5) = bar()
//│   in x5)



class C1(x, y)
class C2(z)
fun foo(a) = if a is
  C1(x, y) then x
  C2(z) then z
fun bar(b) =
  foo(C1(0, 1))
bar()
//│ |#class| |C1|(|x|,| |y|)|↵|#class| |C2|(|z|)|↵|#fun| |foo|(|a|)| |#=| |#if| |a| |is|→|C1|(|x|,| |y|)| |#then| |x|↵|C2|(|z|)| |#then| |z|←|↵|#fun| |bar|(|b|)| |#=|→|foo|(|C1|(|0|,| |1|)|)|←|↵|bar|(||)|
//│ Parsed: {class C1(x, y,) {}; class C2(z,) {}; fun foo = (a,) => if a is ‹(C1(x, y,)) then x; (C2(z,)) then z›; fun bar = (b,) => {foo(C1(0, 1,),)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, C1, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuTypeDef(class, C2, (), Tup(_: Var(z)), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(a)), If(IfOpApp(Var(a), Var(is), IfBlock(IfThen(App(Var(C1), Tup(_: Var(x), _: Var(y))), Var(x);IfThen(App(Var(C2), Tup(_: Var(z))), Var(z)), None))), NuFunDef(None, bar, None, [], Lam(Tup(_: Var(b)), Blk(...))), App(Var(bar), Tup()))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, C1, [x,y]),ClassInfo(1, C2, [z])}, {
//│ Def(0, foo, [a], [{}], 
//│ None, 1, 
//│ let join j0(x4) = x4
//│   in case a of
//│     C1 => let x1 = a.y
//│       in let x2 = a.x
//│         in jump j0(x2)
//│     C2 => let x3 = a.z
//│       in jump j0(x3)
//│ )
//│ Def(1, bar, [b], [{}], 
//│ None, 1, 
//│ let x5 = C1(0,1)
//│   in let* (x6) = foo(x5)
//│     in x6
//│ )
//│ },
//│ let* (x7) = bar()
//│   in x7)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, C1, [x,y]),ClassInfo(1, C2, [z])}, {
//│ Def(0, foo, [a], [{EDestruct，EDirect，ESelect(x)，ESelect(z)}], 
//│ None, 1, 
//│ case a of
//│   C1 => let x2 = a.x
//│     in jump j0(x2)
//│   C2 => let x3 = a.z
//│     in jump j0(x3)
//│ )
//│ Def(1, bar, [b], [{}], 
//│ None, 1, 
//│ let x5 = C1(0,1)
//│   in let* (x6) = foo(x5)
//│     in x6
//│ )
//│ Def(2, @join j0, [x4], [{EDirect}], 
//│ None, 1, 
//│ x4
//│ )
//│ },
//│ let* (x7) = bar()
//│   in x7)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, C1, [x,y]),ClassInfo(1, C2, [z])}, {
//│ Def(1, bar, [b], [{}], 
//│ None, 1, 
//│ let* (x6) = foo$D9$S12(0)
//│   in x6
//│ )
//│ Def(6, foo$D9$S12, [a_x], [{}], 
//│ None, 1, 
//│ jump j0(a_x)
//│ )
//│ Def(2, @join j0, [x4], [{}], 
//│ None, 1, 
//│ x4
//│ )
//│ },
//│ let* (x7) = bar()
//│   in x7)


class Pair(x, y)
fun foo(a, b) =
  let x1 = a.x
  let y1 = a.y
  let x2 = b.x
  let y2 = b.y
  x1 + y1 + x2 + y2
fun bar(c) =
  foo(Pair(0, 1), c)
  foo(c, Pair(2, 3))
  foo(Pair(0, 1), Pair(2, 3))
fun baz() =
  bar(Pair(4,5))
baz()
//│ |#class| |Pair|(|x|,| |y|)|↵|#fun| |foo|(|a|,| |b|)| |#=|→|#let| |x1| |#=| |a|.x|↵|#let| |y1| |#=| |a|.y|↵|#let| |x2| |#=| |b|.x|↵|#let| |y2| |#=| |b|.y|↵|x1| |+| |y1| |+| |x2| |+| |y2|←|↵|#fun| |bar|(|c|)| |#=|→|foo|(|Pair|(|0|,| |1|)|,| |c|)|↵|foo|(|c|,| |Pair|(|2|,| |3|)|)|↵|foo|(|Pair|(|0|,| |1|)|,| |Pair|(|2|,| |3|)|)|←|↵|#fun| |baz|(||)| |#=|→|bar|(|Pair|(|4|,|5|)|)|←|↵|baz|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun foo = (a, b,) => {let x1 = (a).x; let y1 = (a).y; let x2 = (b).x; let y2 = (b).y; +(+(+(x1,)(y1,),)(x2,),)(y2,)}; fun bar = (c,) => {foo(Pair(0, 1,), c,); foo(c, Pair(2, 3,),); foo(Pair(0, 1,), Pair(2, 3,),)}; fun baz = () => {bar(Pair(4, 5,),)}; baz()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(a), _: Var(b)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(_: Var(c)), Blk(...))), NuFunDef(None, baz, None, [], Lam(Tup(), Blk(...))), App(Var(baz), Tup()))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, foo, [a,b], [{}], 
//│ None, 1, 
//│ let x0 = a.x
//│   in let x1 = a.y
//│     in let x2 = b.x
//│       in let x3 = b.y
//│         in let x4 = +(x0,x1)
//│           in let x5 = +(x4,x2)
//│             in let x6 = +(x5,x3)
//│               in x6
//│ )
//│ Def(1, bar, [c], [{}], 
//│ None, 1, 
//│ let x7 = Pair(0,1)
//│   in let* (x8) = foo(x7,c)
//│     in let x9 = Pair(2,3)
//│       in let* (x10) = foo(c,x9)
//│         in let x11 = Pair(0,1)
//│           in let x12 = Pair(2,3)
//│             in let* (x13) = foo(x11,x12)
//│               in x13
//│ )
//│ Def(2, baz, [], [{}], 
//│ None, 1, 
//│ let x14 = Pair(4,5)
//│   in let* (x15) = bar(x14)
//│     in x15
//│ )
//│ },
//│ let* (x16) = baz()
//│   in x16)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, foo, [a,b], [{ESelect(x)，ESelect(y)},{ESelect(x)，ESelect(y)}], 
//│ None, 1, 
//│ let x0 = a.x
//│   in let x1 = a.y
//│     in let x2 = b.x
//│       in let x3 = b.y
//│         in let x4 = +(x0,x1)
//│           in let x5 = +(x4,x2)
//│             in let x6 = +(x5,x3)
//│               in x6
//│ )
//│ Def(1, bar, [c], [{EDirect，ESelect(x)，ESelect(y)}], 
//│ None, 1, 
//│ let x7 = Pair(0,1)
//│   in let* (x8) = foo(x7,c)
//│     in let x9 = Pair(2,3)
//│       in let* (x10) = foo(c,x9)
//│         in let x11 = Pair(0,1)
//│           in let x12 = Pair(2,3)
//│             in let* (x13) = foo(x11,x12)
//│               in x13
//│ )
//│ Def(2, baz, [], [], 
//│ None, 1, 
//│ let x14 = Pair(4,5)
//│   in let* (x15) = bar(x14)
//│     in x15
//│ )
//│ },
//│ let* (x16) = baz()
//│   in x16)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(1, bar, [c], [{}], 
//│ None, 1, 
//│ let x20 = c.x
//│   in let x21 = c.y
//│     in let* (x8) = foo$S17(0,1,x20,x21)
//│       in let* (x10) = foo$S17(x20,x21,2,3)
//│         in let* (x13) = foo$S17(0,1,2,3)
//│           in x13
//│ )
//│ Def(2, baz, [], [{}], 
//│ None, 1, 
//│ let x14 = Pair(4,5)
//│   in let* (x15) = bar(x14)
//│     in x15
//│ )
//│ Def(3, foo$S17, [a_x,a_y,b_x,b_y], [{}], 
//│ None, 1, 
//│ let x4 = +(a_x,a_y)
//│   in let x5 = +(x4,b_x)
//│     in let x6 = +(x5,b_y)
//│       in x6
//│ )
//│ },
//│ let* (x16) = baz()
//│   in x16)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(2, baz, [], [{}], 
//│ None, 1, 
//│ let* (x15) = bar$S28(4,5)
//│   in x15
//│ )
//│ Def(3, foo$S17, [a_x,a_y,b_x,b_y], [{}], 
//│ None, 1, 
//│ let x4 = +(a_x,a_y)
//│   in let x5 = +(x4,b_x)
//│     in let x6 = +(x5,b_y)
//│       in x6
//│ )
//│ Def(4, bar$S28, [c_x,c_y], [{}], 
//│ None, 1, 
//│ let* (x8) = foo$S17(0,1,c_x,c_y)
//│   in let* (x10) = foo$S17(c_x,c_y,2,3)
//│     in let* (x13) = foo$S17(0,1,2,3)
//│       in x13
//│ )
//│ },
//│ let* (x16) = baz()
//│   in x16)

class Pair(x, y)
fun foo() =
  let p = Pair(0, 1)
  let b = p.x
  b
foo()
//│ |#class| |Pair|(|x|,| |y|)|↵|#fun| |foo|(||)| |#=|→|#let| |p| |#=| |Pair|(|0|,| |1|)|↵|#let| |b| |#=| |p|.x|↵|b|←|↵|foo|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun foo = () => {let p = Pair(0, 1,); let b = (p).x; b}; foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(), Blk(...))), App(Var(foo), Tup()))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, foo, [], [{}], 
//│ None, 1, 
//│ let x0 = Pair(0,1)
//│   in let x1 = x0.x
//│     in x1
//│ )
//│ },
//│ let* (x2) = foo()
//│   in x2)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y])}, {
//│ Def(0, foo, [], [], 
//│ None, 1, 
//│ 0
//│ )
//│ },
//│ let* (x2) = foo()
//│   in x2)


