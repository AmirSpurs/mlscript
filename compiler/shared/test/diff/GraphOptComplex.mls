:NewParser
:ParseOnly

:GOInterp
:GraphOpt
class A(x, y, z)
class B(m, n)
fun complex_foo(t) =
  let r = if t is
    A(x, y, z) then x + y * z
    B(m, n) then m - n
  let s = B(1, 2)
  let u = if s is
    A(x, y, z) then 3
    B(m, n) then 4
  r + u
fun bar() =
  complex_foo(A(6, 7, 8))
  complex_foo(B(9, 10))
bar()
//│ |#class| |A|(|x|,| |y|,| |z|)|↵|#class| |B|(|m|,| |n|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |r| |#=| |#if| |t| |is|→|A|(|x|,| |y|,| |z|)| |#then| |x| |+| |y| |*| |z|↵|B|(|m|,| |n|)| |#then| |m| |-| |n|←|↵|#let| |s| |#=| |B|(|1|,| |2|)|↵|#let| |u| |#=| |#if| |s| |is|→|A|(|x|,| |y|,| |z|)| |#then| |3|↵|B|(|m|,| |n|)| |#then| |4|←|↵|r| |+| |u|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|6|,| |7|,| |8|)|)|↵|complex_foo|(|B|(|9|,| |10|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(x, y, z,) {}; class B(m, n,) {}; fun complex_foo = (t,) => {let r = if t is ‹(A(x, y, z,)) then +(x,)(*(y,)(z,),); (B(m, n,)) then -(m,)(n,)›; let s = B(1, 2,); let u = if s is ‹(A(x, y, z,)) then 3; (B(m, n,)) then 4›; +(r,)(u,)}; fun bar = () => {complex_foo(A(6, 7, 8,),); complex_foo(B(9, 10,),)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(x), _: Var(y), _: Var(z)), (), None, None, TypingUnit()), NuTypeDef(class, B, (), Tup(_: Var(m), _: Var(n)), (), None, None, TypingUnit()), NuFunDef(None, complex_foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [x,y,z]),ClassInfo(1, B, [m,n])}, {
//│ Def(0, complex_foo, [t], [{}], 
//│ None, 1, 
//│ let join j0(x9) = let x10 = B(1,2)
//│       in let join j11(x17) = let x18 = +(x9,x17)
//│             in x18
//│         in case x10 of
//│           A => let x12 = x10.z
//│             in let x13 = x10.y
//│               in let x14 = x10.x
//│                 in jump j11(3)
//│           B => let x15 = x10.n
//│             in let x16 = x10.m
//│               in jump j11(4)
//│   in case t of
//│     A => let x1 = t.z
//│       in let x2 = t.y
//│         in let x3 = t.x
//│           in let x4 = *(x2,x1)
//│             in let x5 = +(x3,x4)
//│               in jump j0(x5)
//│     B => let x6 = t.n
//│       in let x7 = t.m
//│         in let x8 = -(x7,x6)
//│           in jump j0(x8)
//│ )
//│ Def(1, bar, [], [{}], 
//│ None, 1, 
//│ let x19 = A(6,7,8)
//│   in let* (x20) = complex_foo(x19)
//│     in let x21 = B(9,10)
//│       in let* (x22) = complex_foo(x21)
//│         in x22
//│ )
//│ },
//│ let* (x23) = bar()
//│   in x23)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, A, [x,y,z]),ClassInfo(1, B, [m,n])}, {
//│ Def(0, complex_foo, [t], [{ESelect(m)，EDestruct，ESelect(y)，ESelect(n)，ESelect(z)，EDirect，ESelect(x)}], 
//│ None, 1, 
//│ case t of
//│   A => let x1 = t.z
//│     in let x2 = t.y
//│       in let x3 = t.x
//│         in let x4 = *(x2,x1)
//│           in let x5 = +(x3,x4)
//│             in jump j0(x5)
//│   B => let x6 = t.n
//│     in let x7 = t.m
//│       in let x8 = -(x7,x6)
//│         in jump j0(x8)
//│ )
//│ Def(1, bar, [], [], 
//│ None, 1, 
//│ let x19 = A(6,7,8)
//│   in let* (x20) = complex_foo(x19)
//│     in let x21 = B(9,10)
//│       in let* (x22) = complex_foo(x21)
//│         in x22
//│ )
//│ Def(2, @join j0, [x9], [{EDirect}], 
//│ None, 1, 
//│ let x10 = B(1,2)
//│   in case x10 of
//│     A => jump j11(3)
//│     B => jump j11(4)
//│ )
//│ Def(3, @join j11, [x17], [{EDirect}], 
//│ None, 1, 
//│ let x18 = +(x9,x17)
//│   in x18
//│ )
//│ },
//│ let* (x23) = bar()
//│   in x23)
//│ 
//│ Interpreted ------------------------------
//│ 4
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [x,y,z]),ClassInfo(1, B, [m,n])}, {
//│ Def(1, bar, [], [], 
//│ None, 1, 
//│ let* (x20) = complex_foo$D25$S29(8,7,6)
//│   in let* (x22) = complex_foo$D26$S30(10,9)
//│     in x22
//│ )
//│ Def(2, @join j0, [x9], [{EDirect}], 
//│ None, 1, 
//│ let x10 = B(1,2)
//│   in case x10 of
//│     A => jump j11(3)
//│     B => jump j11(4)
//│ )
//│ Def(3, @join j11, [x17], [{EDirect}], 
//│ None, 1, 
//│ let x18 = +(x9,x17)
//│   in x18
//│ )
//│ Def(7, complex_foo$D25$S29, [t_z,t_y,t_x], [{EDirect},{EDirect},{EDirect}], 
//│ None, 1, 
//│ let x4 = *(t_y,t_z)
//│   in let x5 = +(t_x,x4)
//│     in jump j0(x5)
//│ )
//│ Def(8, complex_foo$D26$S30, [t_n,t_m], [{EDirect},{EDirect}], 
//│ None, 1, 
//│ let x8 = -(t_m,t_n)
//│   in jump j0(x8)
//│ )
//│ },
//│ let* (x23) = bar()
//│   in x23)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 4

:GraphOpt
class A(w, x)
class B(y)
class C(z)
fun complex_foo(t) =
  let a = 1 + 2
  let b = 1 * 2
  let x = if t is
    A(x, y) then y
    B(x) then B(x + b)
    C(x) then C(0)
  let z = A(5, x)
  let v = B(6)
  let y = if x is
    A(x, y) then
      let m = x + a + b
      if y is
        A(x, y) then x
        B(x) then m
        C(x) then 0
    B(x) then 2
    C(x) then 3
  if z is
    A(x, y) then x
    B(x) then 4
    C(x) then
      if v is
        A(x, y) then x
        B(x) then 7
        C(x) then 8
fun bar() =
  complex_foo(A(10, A(9, B(10))))
bar()
//│ |#class| |A|(|w|,| |x|)|↵|#class| |B|(|y|)|↵|#class| |C|(|z|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |a| |#=| |1| |+| |2|↵|#let| |b| |#=| |1| |*| |2|↵|#let| |x| |#=| |#if| |t| |is|→|A|(|x|,| |y|)| |#then| |y|↵|B|(|x|)| |#then| |B|(|x| |+| |b|)|↵|C|(|x|)| |#then| |C|(|0|)|←|↵|#let| |z| |#=| |A|(|5|,| |x|)|↵|#let| |v| |#=| |B|(|6|)|↵|#let| |y| |#=| |#if| |x| |is|→|A|(|x|,| |y|)| |#then|→|#let| |m| |#=| |x| |+| |a| |+| |b|↵|#if| |y| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |m|↵|C|(|x|)| |#then| |0|←|←|↵|B|(|x|)| |#then| |2|↵|C|(|x|)| |#then| |3|←|↵|#if| |z| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |4|↵|C|(|x|)| |#then|→|#if| |v| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |7|↵|C|(|x|)| |#then| |8|←|←|←|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|10|,| |A|(|9|,| |B|(|10|)|)|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(w, x,) {}; class B(y,) {}; class C(z,) {}; fun complex_foo = (t,) => {let a = +(1,)(2,); let b = *(1,)(2,); let x = if t is ‹(A(x, y,)) then y; (B(x,)) then B(+(x,)(b,),); (C(x,)) then C(0,)›; let z = A(5, x,); let v = B(6,); let y = if x is ‹(A(x, y,)) then {let m = +(+(x,)(a,),)(b,); if y is ‹(A(x, y,)) then x; (B(x,)) then m; (C(x,)) then 0›}; (B(x,)) then 2; (C(x,)) then 3›; if z is ‹(A(x, y,)) then x; (B(x,)) then 4; (C(x,)) then {if v is ‹(A(x, y,)) then x; (B(x,)) then 7; (C(x,)) then 8›}›}; fun bar = () => {complex_foo(A(10, A(9, B(10,),),),)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(w), _: Var(x)), (), None, None, TypingUnit()), NuTypeDef(class, B, (), Tup(_: Var(y)), (), None, None, TypingUnit()), NuTypeDef(class, C, (), Tup(_: Var(z)), (), None, None, TypingUnit()), NuFunDef(None, complex_foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(0, complex_foo, [t], [{}], 
//│ None, 1, 
//│ let x0 = +(1,2)
//│   in let x1 = *(1,2)
//│     in let join j2(x10) = let x11 = A(5,x10)
//│           in let x12 = B(6)
//│             in let join j13(x26) = let join j27(x38) = x38
//│                   in case x11 of
//│                     A => let x28 = x11.x
//│                       in let x29 = x11.w
//│                         in jump j27(x29)
//│                     B => let x30 = x11.y
//│                       in jump j27(4)
//│                     C => let x31 = x11.z
//│                       in let join j32(x37) = jump j27(x37)
//│                         in case x12 of
//│                           A => let x33 = x12.x
//│                             in let x34 = x12.w
//│                               in jump j32(x34)
//│                           B => let x35 = x12.y
//│                             in jump j32(7)
//│                           C => let x36 = x12.z
//│                             in jump j32(8)
//│               in case x10 of
//│                 A => let x14 = x10.x
//│                   in let x15 = x10.w
//│                     in let x16 = +(x15,x0)
//│                       in let x17 = +(x16,x1)
//│                         in let join j18(x23) = jump j13(x23)
//│                           in case x14 of
//│                             A => let x19 = x14.x
//│                               in let x20 = x14.w
//│                                 in jump j18(x20)
//│                             B => let x21 = x14.y
//│                               in jump j18(x17)
//│                             C => let x22 = x14.z
//│                               in jump j18(0)
//│                 B => let x24 = x10.y
//│                   in jump j13(2)
//│                 C => let x25 = x10.z
//│                   in jump j13(3)
//│       in case t of
//│         A => let x3 = t.x
//│           in let x4 = t.w
//│             in jump j2(x3)
//│         B => let x5 = t.y
//│           in let x6 = +(x5,x1)
//│             in let x7 = B(x6)
//│               in jump j2(x7)
//│         C => let x8 = t.z
//│           in let x9 = C(0)
//│             in jump j2(x9)
//│ )
//│ Def(1, bar, [], [{}], 
//│ None, 1, 
//│ let x39 = B(10)
//│   in let x40 = A(9,x39)
//│     in let x41 = A(10,x40)
//│       in let* (x42) = complex_foo(x41)
//│         in x42
//│ )
//│ },
//│ let* (x43) = bar()
//│   in x43)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(0, complex_foo, [t], [{EDestruct，EDirect，ESelect(x)，ESelect(y)}], 
//│ None, 1, 
//│ let x0 = +(1,2)
//│   in let x1 = *(1,2)
//│     in case t of
//│       A => let x3 = t.x
//│         in jump j2(x3)
//│       B => let x5 = t.y
//│         in let x6 = +(x5,x1)
//│           in let x7 = B(x6)
//│             in jump j2(x7)
//│       C => let x9 = C(0)
//│         in jump j2(x9)
//│ )
//│ Def(1, bar, [], [], 
//│ None, 1, 
//│ let x39 = B(10)
//│   in let x40 = A(9,x39)
//│     in let x41 = A(10,x40)
//│       in let* (x42) = complex_foo(x41)
//│         in x42
//│ )
//│ Def(2, @join j2, [x10], [{EDirect，EDestruct，ESelect(x)，ESelect(w)}], 
//│ None, 1, 
//│ let x11 = A(5,x10)
//│   in let x12 = B(6)
//│     in case x10 of
//│       A => let x14 = x10.x
//│         in let x15 = x10.w
//│           in let x16 = +(x15,x0)
//│             in let x17 = +(x16,x1)
//│               in case x14 of
//│                 A => let x20 = x14.w
//│                   in jump j18(x20)
//│                 B => jump j18(x17)
//│                 C => jump j18(0)
//│       B => jump j13(2)
//│       C => jump j13(3)
//│ )
//│ Def(3, @join j13, [x26], [{}], 
//│ None, 1, 
//│ case x11 of
//│   A => let x29 = x11.w
//│     in x29
//│   B => 4
//│   C => case x12 of
//│     A => let x34 = x12.w
//│       in x34
//│     B => 7
//│     C => 8
//│ )
//│ Def(6, @join j18, [x23], [{EDirect}], 
//│ None, 1, 
//│ jump j13(x23)
//│ )
//│ },
//│ let* (x43) = bar()
//│   in x43)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(1, bar, [], [], 
//│ None, 1, 
//│ let x39 = B(10)
//│   in let x40 = A(9,x39)
//│     in let x41 = A(10,x40)
//│       in let* (x62,x63,x64) = complex_foo$P44(x41)
//│         in let* (x42) = complex_foo$D45(x62,x63,x64)
//│           in x42
//│ )
//│ Def(2, @join j2, [x10], [{EDirect，EDestruct，ESelect(x)，ESelect(w)}], 
//│ None, 1, 
//│ let x11 = A(5,x10)
//│   in let x12 = B(6)
//│     in case x10 of
//│       A => let x14 = x10.x
//│         in let x15 = x10.w
//│           in let x16 = +(x15,x0)
//│             in let x17 = +(x16,x1)
//│               in case x14 of
//│                 A => let x20 = x14.w
//│                   in jump j18(x20)
//│                 B => jump j18(x17)
//│                 C => jump j18(0)
//│       B => jump j13(2)
//│       C => jump j13(3)
//│ )
//│ Def(3, @join j13, [x26], [{}], 
//│ None, 1, 
//│ case x11 of
//│   A => let x29 = x11.w
//│     in x29
//│   B => 4
//│   C => case x12 of
//│     A => let x34 = x12.w
//│       in x34
//│     B => 7
//│     C => 8
//│ )
//│ Def(6, @join j18, [x23], [{EDirect}], 
//│ None, 1, 
//│ jump j13(x23)
//│ )
//│ Def(7, complex_foo$P44, [t], [{EDirect}], 
//│ None, 3, 
//│ let x0 = +(1,2)
//│   in let x1 = *(1,2)
//│     in t,x0,x1
//│ )
//│ Def(8, complex_foo$D45, [t,x0,x1], [{ESelect(x)},{EDirect},{EDirect}], 
//│ None, 1, 
//│ let x3 = t.x
//│   in jump j2(x3)
//│ )
//│ },
//│ let* (x43) = bar()
//│   in x43)

:GraphOpt
class A(w, x)
class B(y)
class C(z)
fun complex_foo(t) =
  let a = 1 + 2
  let b = 1 * 2
  let x = if t is
    A(x, y) then A(x, C(0))
    B(x) then B(x + b)
    C(x) then C(0)
  let z = A(5, x)
  let v = B(6)
  let y = if x is
    A(x, y) then
      let m = x + a + b
      if y is
        A(x, y) then x
        B(x) then m
        C(x) then 0
    B(x) then 2
    C(x) then 3
  if z is
    A(x, y) then x
    B(x) then 4
    C(x) then
      if v is
        A(x, y) then x
        B(x) then 7
        C(x) then 8
fun bar() =
  complex_foo(A(10, A(9, B(10))))
bar()
//│ |#class| |A|(|w|,| |x|)|↵|#class| |B|(|y|)|↵|#class| |C|(|z|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |a| |#=| |1| |+| |2|↵|#let| |b| |#=| |1| |*| |2|↵|#let| |x| |#=| |#if| |t| |is|→|A|(|x|,| |y|)| |#then| |A|(|x|,| |C|(|0|)|)|↵|B|(|x|)| |#then| |B|(|x| |+| |b|)|↵|C|(|x|)| |#then| |C|(|0|)|←|↵|#let| |z| |#=| |A|(|5|,| |x|)|↵|#let| |v| |#=| |B|(|6|)|↵|#let| |y| |#=| |#if| |x| |is|→|A|(|x|,| |y|)| |#then|→|#let| |m| |#=| |x| |+| |a| |+| |b|↵|#if| |y| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |m|↵|C|(|x|)| |#then| |0|←|←|↵|B|(|x|)| |#then| |2|↵|C|(|x|)| |#then| |3|←|↵|#if| |z| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |4|↵|C|(|x|)| |#then|→|#if| |v| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |7|↵|C|(|x|)| |#then| |8|←|←|←|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|10|,| |A|(|9|,| |B|(|10|)|)|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(w, x,) {}; class B(y,) {}; class C(z,) {}; fun complex_foo = (t,) => {let a = +(1,)(2,); let b = *(1,)(2,); let x = if t is ‹(A(x, y,)) then A(x, C(0,),); (B(x,)) then B(+(x,)(b,),); (C(x,)) then C(0,)›; let z = A(5, x,); let v = B(6,); let y = if x is ‹(A(x, y,)) then {let m = +(+(x,)(a,),)(b,); if y is ‹(A(x, y,)) then x; (B(x,)) then m; (C(x,)) then 0›}; (B(x,)) then 2; (C(x,)) then 3›; if z is ‹(A(x, y,)) then x; (B(x,)) then 4; (C(x,)) then {if v is ‹(A(x, y,)) then x; (B(x,)) then 7; (C(x,)) then 8›}›}; fun bar = () => {complex_foo(A(10, A(9, B(10,),),),)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(w), _: Var(x)), (), None, None, TypingUnit()), NuTypeDef(class, B, (), Tup(_: Var(y)), (), None, None, TypingUnit()), NuTypeDef(class, C, (), Tup(_: Var(z)), (), None, None, TypingUnit()), NuFunDef(None, complex_foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(0, complex_foo, [t], [{}], 
//│ None, 1, 
//│ let x0 = +(1,2)
//│   in let x1 = *(1,2)
//│     in let join j2(x12) = let x13 = A(5,x12)
//│           in let x14 = B(6)
//│             in let join j15(x28) = let join j29(x40) = x40
//│                   in case x13 of
//│                     A => let x30 = x13.x
//│                       in let x31 = x13.w
//│                         in jump j29(x31)
//│                     B => let x32 = x13.y
//│                       in jump j29(4)
//│                     C => let x33 = x13.z
//│                       in let join j34(x39) = jump j29(x39)
//│                         in case x14 of
//│                           A => let x35 = x14.x
//│                             in let x36 = x14.w
//│                               in jump j34(x36)
//│                           B => let x37 = x14.y
//│                             in jump j34(7)
//│                           C => let x38 = x14.z
//│                             in jump j34(8)
//│               in case x12 of
//│                 A => let x16 = x12.x
//│                   in let x17 = x12.w
//│                     in let x18 = +(x17,x0)
//│                       in let x19 = +(x18,x1)
//│                         in let join j20(x25) = jump j15(x25)
//│                           in case x16 of
//│                             A => let x21 = x16.x
//│                               in let x22 = x16.w
//│                                 in jump j20(x22)
//│                             B => let x23 = x16.y
//│                               in jump j20(x19)
//│                             C => let x24 = x16.z
//│                               in jump j20(0)
//│                 B => let x26 = x12.y
//│                   in jump j15(2)
//│                 C => let x27 = x12.z
//│                   in jump j15(3)
//│       in case t of
//│         A => let x3 = t.x
//│           in let x4 = t.w
//│             in let x5 = C(0)
//│               in let x6 = A(x4,x5)
//│                 in jump j2(x6)
//│         B => let x7 = t.y
//│           in let x8 = +(x7,x1)
//│             in let x9 = B(x8)
//│               in jump j2(x9)
//│         C => let x10 = t.z
//│           in let x11 = C(0)
//│             in jump j2(x11)
//│ )
//│ Def(1, bar, [], [{}], 
//│ None, 1, 
//│ let x41 = B(10)
//│   in let x42 = A(9,x41)
//│     in let x43 = A(10,x42)
//│       in let* (x44) = complex_foo(x43)
//│         in x44
//│ )
//│ },
//│ let* (x45) = bar()
//│   in x45)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(0, complex_foo, [t], [{EDestruct，EDirect，ESelect(w)，ESelect(y)}], 
//│ None, 1, 
//│ let x0 = +(1,2)
//│   in let x1 = *(1,2)
//│     in case t of
//│       A => let x4 = t.w
//│         in let x5 = C(0)
//│           in let x6 = A(x4,x5)
//│             in jump j2(x6)
//│       B => let x7 = t.y
//│         in let x8 = +(x7,x1)
//│           in let x9 = B(x8)
//│             in jump j2(x9)
//│       C => let x11 = C(0)
//│         in jump j2(x11)
//│ )
//│ Def(1, bar, [], [], 
//│ None, 1, 
//│ let x41 = B(10)
//│   in let x42 = A(9,x41)
//│     in let x43 = A(10,x42)
//│       in let* (x44) = complex_foo(x43)
//│         in x44
//│ )
//│ Def(2, @join j2, [x12], [{EDirect，EDestruct，ESelect(x)，ESelect(w)}], 
//│ None, 1, 
//│ let x13 = A(5,x12)
//│   in let x14 = B(6)
//│     in case x12 of
//│       A => let x16 = x12.x
//│         in let x17 = x12.w
//│           in let x18 = +(x17,x0)
//│             in let x19 = +(x18,x1)
//│               in case x16 of
//│                 A => let x22 = x16.w
//│                   in jump j20(x22)
//│                 B => jump j20(x19)
//│                 C => jump j20(0)
//│       B => jump j15(2)
//│       C => jump j15(3)
//│ )
//│ Def(3, @join j15, [x28], [{}], 
//│ None, 1, 
//│ case x13 of
//│   A => let x31 = x13.w
//│     in x31
//│   B => 4
//│   C => case x14 of
//│     A => let x36 = x14.w
//│       in x36
//│     B => 7
//│     C => 8
//│ )
//│ Def(6, @join j20, [x25], [{EDirect}], 
//│ None, 1, 
//│ jump j15(x25)
//│ )
//│ },
//│ let* (x45) = bar()
//│   in x45)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(1, bar, [], [], 
//│ None, 1, 
//│ let x41 = B(10)
//│   in let x42 = A(9,x41)
//│     in let x43 = A(10,x42)
//│       in let* (x69,x70,x71) = complex_foo$P46(x43)
//│         in let* (x44) = complex_foo$D47(x69,x70,x71)
//│           in x44
//│ )
//│ Def(2, @join j2, [x12], [{EDirect，EDestruct，ESelect(x)，ESelect(w)}], 
//│ None, 1, 
//│ let x13 = A(5,x12)
//│   in let x14 = B(6)
//│     in case x12 of
//│       A => let x16 = x12.x
//│         in let x17 = x12.w
//│           in let x18 = +(x17,x0)
//│             in let x19 = +(x18,x1)
//│               in case x16 of
//│                 A => let x22 = x16.w
//│                   in jump j20(x22)
//│                 B => jump j20(x19)
//│                 C => jump j20(0)
//│       B => jump j15(2)
//│       C => jump j15(3)
//│ )
//│ Def(3, @join j15, [x28], [{}], 
//│ None, 1, 
//│ case x13 of
//│   A => let x31 = x13.w
//│     in x31
//│   B => 4
//│   C => case x14 of
//│     A => let x36 = x14.w
//│       in x36
//│     B => 7
//│     C => 8
//│ )
//│ Def(6, @join j20, [x25], [{EDirect}], 
//│ None, 1, 
//│ jump j15(x25)
//│ )
//│ Def(7, complex_foo$P46, [t], [{EDirect}], 
//│ None, 3, 
//│ let x0 = +(1,2)
//│   in let x1 = *(1,2)
//│     in t,x0,x1
//│ )
//│ Def(8, complex_foo$D47, [t,x0,x1], [{ESelect(w)},{EDirect},{EDirect}], 
//│ None, 1, 
//│ let x4 = t.w
//│   in let x5 = C(0)
//│     in let x6 = A(x4,x5)
//│       in jump j2(x6)
//│ )
//│ },
//│ let* (x45) = bar()
//│   in x45)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(1, bar, [], [], 
//│ None, 1, 
//│ let x41 = B(10)
//│   in let x42 = A(9,x41)
//│     in let x43 = A(10,x42)
//│       in let* (x69,x70,x71) = complex_foo$P46(x43)
//│         in let* (x44) = complex_foo$D47(x69,x70,x71)
//│           in x44
//│ )
//│ Def(3, @join j15, [x28], [{}], 
//│ None, 1, 
//│ case x13 of
//│   A => let x31 = x13.w
//│     in x31
//│   B => 4
//│   C => case x14 of
//│     A => let x36 = x14.w
//│       in x36
//│     B => 7
//│     C => 8
//│ )
//│ Def(6, @join j20, [x25], [{EDirect}], 
//│ None, 1, 
//│ jump j15(x25)
//│ )
//│ Def(7, complex_foo$P46, [t], [{EDirect}], 
//│ None, 3, 
//│ let x0 = +(1,2)
//│   in let x1 = *(1,2)
//│     in t,x0,x1
//│ )
//│ Def(8, complex_foo$D47, [t,x0,x1], [{ESelect(w)},{EDirect},{EDirect}], 
//│ None, 1, 
//│ let x4 = t.w
//│   in let x5 = C(0)
//│     in let x6 = A(x4,x5)
//│       in let* (x76,x77,x78,x79,x80) = j2$P72(x6)
//│         in jump j2$D73(x76,x77,x78,x79,x80)
//│ )
//│ Def(15, j2$P72, [x12], [{EDirect}], 
//│ Some(ICtor(A)), 5, 
//│ let x13 = A(5,x12)
//│   in let x14 = B(6)
//│     in x13,x12,x0,x1,x14
//│ )
//│ Def(16, @join j2$D73, [x13,x12,x0,x1,x14], [{EDestruct，EDirect，ESelect(w)},{ESelect(x)，ESelect(w)},{EDirect},{EDirect},{EDestruct，EDirect，ESelect(w)}], 
//│ None, 1, 
//│ let x16 = x12.x
//│   in let x17 = x12.w
//│     in let x18 = +(x17,x0)
//│       in let x19 = +(x18,x1)
//│         in case x16 of
//│           A => let x22 = x16.w
//│             in jump j20(x22)
//│           B => jump j20(x19)
//│           C => jump j20(0)
//│ )
//│ },
//│ let* (x45) = bar()
//│   in x45)
